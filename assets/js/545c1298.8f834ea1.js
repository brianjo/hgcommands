"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9338],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7618:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={},a=void 0,s={unversionedId:"Commands/purge",id:"Commands/purge",title:"purge",description:"",source:"@site/docs/Commands/purge.md",sourceDirName:"Commands",slug:"/Commands/purge",permalink:"/docs/Commands/purge",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/purge.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"pull",permalink:"/docs/Commands/pull"},next:{title:"push",permalink:"/docs/Commands/push"}},l={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"hg purge \\[OPTION\\]... \\[DIR\\]...\n\naliases: clean\n\ndelete untracked files\n\n    Delete all untracked files in your checkout. Untracked files are files\n    that are unknown to Mercurial. They are marked with \"?\" when you run 'hg\n    status'.\n\n    By default, 'hg purge' does not affect:\n\n    - Modified and unmodified tracked files\n    - Ignored files (unless --all is specified)\n    - New files added to the repository with 'hg add', but not yet committed\n    - Empty directories that contain no files (unless --dirs is specified)\n\n    If directories are given on the command line, only files in these\n    directories are considered.\n\n    Caution: Be careful with purge, as you might irreversibly delete some\n    files you forgot to add to the repository. There is no way to undo an 'hg\n    purge' operation. Run 'hg status' first to verify the list of files that\n    will be deleted, or use the --print option with 'hg purge' to preview the\n    results.\n\nOptions (\\[+\\] can be repeated):\n\n-a --abort-on-err abort if an error occurs --all purge ignored files too\n--dirs purge empty directories --files purge files -p --print print\nfilenames instead of deleting them -0 --print0 end filenames with NUL,\nfor use with xargs (implies -p/--print) -I --include PATTERN \\[+\\]\ninclude names matching the given patterns -X --exclude PATTERN \\[+\\]\nexclude names matching the given patterns\n\n(some details hidden, use --verbose to show complete help)\n")))}p.isMDXComponent=!0}}]);