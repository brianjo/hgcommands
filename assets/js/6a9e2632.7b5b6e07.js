"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4300],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=o.createContext({}),l=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=l(e.components);return o.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),p=r,h=d["".concat(i,".").concat(p)]||d[p]||m[p]||a;return t?o.createElement(h,c(c({ref:n},u),{},{components:t})):o.createElement(h,c({ref:n},u))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var l=2;l<a;l++)c[l]=t[l];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},990:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const a={},c=void 0,s={unversionedId:"Commands/undo",id:"Commands/undo",title:"undo",description:"",source:"@site/docs/Commands/undo.md",sourceDirName:"Commands",slug:"/Commands/undo",permalink:"/hgcommands/docs/Commands/undo",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/undo.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"uncopy",permalink:"/hgcommands/docs/Commands/uncopy"},next:{title:"unhide",permalink:"/hgcommands/docs/Commands/unhide"}},i={},l=[],u={toc:l};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"hg undo\n\nundo the last local command\n\n    Reverse the effects of the last local command. A local command is one that\n    changed the currently checked out commit, that modified the contents of\n    local commits, or that changed local bookmarks. Examples of local commands\n    include 'hg checkout', 'hg commit', 'hg amend', and 'hg rebase'.\n\n    You cannot use 'hg undo' to undo uncommited changes in the working copy,\n    or changes to remote bookmarks.\n\n    You can run 'hg undo' multiple times to undo a series of local commands.\n    Alternatively, you can explicitly specify the number of local commands to\n    undo using --step. This number can also be specified as a positional\n    argument.\n\n    To undo the effects of 'hg undo', run 'hg redo'. Run 'hg help redo' for\n    more information.\n\n    Include --keep to preserve the state of the working copy. For example,\n    specify --keep when running 'hg undo' to reverse the effects of an 'hg\n    commit' or 'hg amend' operation while still preserving changes in the\n    working copy. These changes will appear as pending changes.\n\n    Specify --preview to see a graphical display that shows what your smartlog\n    will look like after you run the command. Specify --interactive for an\n    interactive version of this preview in which you can step backwards and\n    forwards in the undo history.\n\n    Note:\n       'hg undo' cannot be used with non-local commands, or with commands that\n       are read-only. 'hg undo' will skip over these commands in the undo\n       history.\n\n       For hybrid commands that result in both local and remote changes, 'hg\n       undo' will undo the local changes, but not the remote changes. For\n       example, 'hg pull --rebase' might move remote/master and also rebase\n       local commits. In this situation, 'hg undo' will revert the rebase, but\n       not the change to remote/master.\n\nOptions:\n\n-a --absolute absolute based on command index instead of relative undo\n-i --interactive use interactive ui for undo -k --keep keep working copy\nchanges -n --step VALUE how many steps to undo back (default: 1) -p\n--preview see smartlog-like preview of future undo state\n\n(some details hidden, use --verbose to show complete help)\n")))}m.isMDXComponent=!0}}]);