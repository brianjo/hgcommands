"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3705],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>p});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=o.createContext({}),l=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return o.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,d=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),f=l(t),p=r,m=f["".concat(d,".").concat(p)]||f[p]||u[p]||s;return t?o.createElement(m,i(i({ref:n},c),{},{components:t})):o.createElement(m,i({ref:n},c))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=f;var a={};for(var d in n)hasOwnProperty.call(n,d)&&(a[d]=n[d]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var l=2;l<s;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},18:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const s={},i=void 0,a={unversionedId:"Commands/status",id:"Commands/status",title:"status",description:"",source:"@site/docs/Commands/status.md",sourceDirName:"Commands",slug:"/Commands/status",permalink:"/docs/Commands/status",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/status.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"split",permalink:"/docs/Commands/split"},next:{title:"summary",permalink:"/docs/Commands/summary"}},d={},l=[],c={toc:l};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"hg status \\[OPTION\\]... \\[FILE\\]...\n\naliases: st\n\nlist files with pending changes\n\n    Show status of files in the repository using the following status\n    indicators:\n\n      M = modified\n      A = added\n      R = removed\n      C = clean\n      ! = missing (deleted by a non-hg command, but still tracked)\n      ? = not tracked\n      I = ignored\n        = origin of the previous file (with --copies)\n\n    By default, shows files that have been modified, added, removed, deleted,\n    or that are unknown (corresponding to the options -mardu). Files that are\n    unmodified, ignored, or the source of a copy/move operation are not\n    listed.\n\n    To control the exact statuses that are shown, specify the relevant flags\n    (like -rd to show only files that are removed or deleted). Additionally,\n    specify -q/--quiet to hide both unknown and ignored files.\n\n    To show the status of specific files, provide an explicit list of files to\n    match. To include or exclude files using regular expressions, use -I or\n    -X.\n\n    If --rev is specified, and only one revision is given, it is used as the\n    base revision. If two revisions are given, the differences between them\n    are shown. The --change option can also be used as a shortcut to list the\n    changed files of a revision from its first parent.\n\n    Note:\n       'hg status' might appear to disagree with 'hg diff' if permissions have\n       changed or a merge has occurred, because the standard diff format does\n       not report permission changes and 'hg diff' only reports changes\n       relative to one merge parent.\n\n    Returns 0 on success.\n\nOptions (\\[+\\] can be repeated):\n\n-A --all show status of all files -m --modified show only modified files\n-a --added show only added files -r --removed show only removed files -d\n--deleted show only deleted (but tracked) files -c --clean show only\nfiles without changes -u --unknown show only unknown (not tracked) files\n-i --ignored show only ignored files -n --no-status hide status prefix\n-C --copies show source of copied files -0 --print0 end filenames with\nNUL, for use with xargs --rev REV \\[+\\] show difference from revision\n--change REV list the changed files of a revision --root-relative show\nstatus relative to root -I --include PATTERN \\[+\\] include names\nmatching the given patterns -X --exclude PATTERN \\[+\\] exclude names\nmatching the given patterns\n\n(some details hidden, use --verbose to show complete help)\n")))}u.isMDXComponent=!0}}]);