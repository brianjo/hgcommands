"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6471],{3905:(e,t,o)=>{o.d(t,{Zo:()=>l,kt:()=>k});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var m=r.createContext({}),c=function(e){var t=r.useContext(m),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},l=function(e){var t=c(e.components);return r.createElement(m.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,m=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(o),k=n,b=p["".concat(m,".").concat(k)]||p[k]||d[k]||a;return o?r.createElement(b,i(i({ref:t},l),{},{components:o})):r.createElement(b,i({ref:t},l))}));function k(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=p;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<a;c++)i[c]=o[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}p.displayName="MDXCreateElement"},3105:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=o(7462),n=(o(7294),o(3905));const a={},i=void 0,s={unversionedId:"Commands/bookmarks",id:"Commands/bookmarks",title:"bookmarks",description:"",source:"@site/docs/Commands/bookmarks.md",sourceDirName:"Commands",slug:"/Commands/bookmarks",permalink:"/hgcommands/docs/Commands/bookmarks",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/bookmarks.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"blackbox",permalink:"/hgcommands/docs/Commands/blackbox"},next:{title:"branch",permalink:"/hgcommands/docs/Commands/branch"}},m={},c=[],l={toc:c};function d(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"hg bookmarks \\[OPTIONS\\]... \\[NAME\\]...\n\naliases: bo\n\ncreate a new bookmark or list existing bookmarks\n\n    Bookmarks are labels on commits to help track lines of development.\n    Bookmarks are unversioned and can be moved, renamed and deleted. Deleting\n    or moving a bookmark has no effect on the associated commits.\n\n    Creating or updating to a bookmark causes it to be marked as 'active'. The\n    active bookmark is indicated with a '*'. When a commit is made, the active\n    bookmark will advance to the new commit. A plain 'hg update' will also\n    advance an active bookmark, if possible. Updating away from a bookmark\n    will cause it to be deactivated.\n\n    Bookmarks can be pushed and pulled between repositories (see 'hg help\n    push' and 'hg help pull'). If a shared bookmark has diverged, a new\n    'divergent bookmark' of the form 'name@path' will be created. Using 'hg\n    merge' will resolve the divergence.\n\n    Specifying bookmark as '.' to -m or -d options is equivalent to specifying\n    the active bookmark's name.\n\n    A bookmark named '@' has the special property that 'hg clone' will check\n    it out by default if it exists.\n\nOptions:\n\n-f --force force -r --rev REV revision for bookmark action -d --delete\ndelete a given bookmark -D --strip like --delete, but also strip\nchangesets -m --rename OLD rename a given bookmark -i --inactive mark a\nbookmark inactive -t --track BOOKMARK track this bookmark or remote name\n-u --untrack remove tracking for this bookmark --list-remote list remote\nbookmarks. Positional arguments are interpreted as wildcard patterns.\nOnly allowed wildcard is '\\*' in the end of the pattern. If no\npositional arguments are specified then it will list the most\n\"important\" remote bookmarks. Otherwise it will list remote bookmarks\nthat match at least one pattern --remote-path VALUE name of the remote\npath to list the bookmarks -a --all show both remote and local bookmarks\n--list-subscriptions show only remote bookmarks that are available\nlocally\n\n(some details hidden, use --verbose to show complete help)\n")))}d.isMDXComponent=!0}}]);