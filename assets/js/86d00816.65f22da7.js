"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4656],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=c(t),h=r,f=p["".concat(l,".").concat(h)]||p[h]||d[h]||s;return t?o.createElement(f,a(a({ref:n},m),{},{components:t})):o.createElement(f,a({ref:n},m))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,a=new Array(s);a[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var c=2;c<s;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3889:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=t(7462),r=(t(7294),t(3905));const s={},a=void 0,i={unversionedId:"Commands/log",id:"Commands/log",title:"log",description:"",source:"@site/docs/Commands/log.md",sourceDirName:"Commands",slug:"/Commands/log",permalink:"/docs/Commands/log",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/log.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"journal",permalink:"/docs/Commands/journal"},next:{title:"manifest",permalink:"/docs/Commands/manifest"}},l={},c=[],m={toc:c};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"hg log \\[OPTION\\]... \\[FILE\\]\n\naliases: history\n\nshow commit history\n\n    Print the revision history of the specified files or the entire project.\n\n    If no revision range is specified, the default is \"::.\".\n\n    File history is shown without following rename or copy history of files.\n    Use -f/--follow with a filename to follow history across renames and\n    copies. --follow without a filename will only show ancestors or\n    descendants of the starting revision.\n\n    By default this command prints revision number and commit id, non-trivial\n    parents, user, date and time, and a summary for each commit. When the\n    -v/--verbose switch is used, the list of changed files and full commit\n    message are shown.\n\n    With --graph the revisions are shown as an ASCII art DAG with the most\n    recent commit at the top. 'o' is a commit, '@' is a working directory\n    parent, 'x' is obsolete, and '+' represents a fork where the commit from\n    the lines below is a parent of the 'o' merge on the same line. Paths in\n    the DAG are represented with '|', '/' and so forth. ':' in place of a '|'\n    indicates one or more revisions in a path are omitted.\n\n    Note:\n       'hg log --patch' may generate unexpected diff output for merge commits,\n       as it will only compare the merge commit against its first parent.\n       Also, only files different from BOTH parents will appear in files:.\n\n    Note:\n       For performance reasons, 'hg log FILE' may omit duplicate changes made\n       on branches and will not show removals or mode changes. To see all such\n       changes, use the --removed switch.\n\n    See 'hg help dates' for a list of formats valid for -d/--date.\n\n    See 'hg help revisions' for more about specifying and ordering revisions.\n\n    See 'hg help templates' for more about pre-packaged styles and specifying\n    custom templates. The default template used by the log command can be\n    customized via the \"ui.logtemplate\" configuration setting.\n\n    Returns 0 on success.\n\nOptions (\\[+\\] can be repeated):\n\n-f --follow follow changeset history, or file history across copies and\nrenames -d --date DATE show revisions matching date spec -C --copies\nshow copied files -k --keyword TEXT \\[+\\] do case-insensitive search for\na given text -r --rev REV \\[+\\] show the specified revision or revset\n--removed include revisions where files were removed -u --user USER\n\\[+\\] revisions committed by user -b --branch BRANCH \\[+\\] show\nchangesets within the given named branch -P --prune REV \\[+\\] do not\ndisplay revision or any of its ancestors -p --patch show patch -g --git\nuse git extended diff format -l --limit NUM limit number of changes\ndisplayed -M --no-merges do not show merges --stat output diffstat-style\nsummary of changes -G --graph show the revision DAG -T --template\nTEMPLATE display with template -I --include PATTERN \\[+\\] include names\nmatching the given patterns -X --exclude PATTERN \\[+\\] exclude names\nmatching the given patterns --all shows all changesets in the repo\n--remote show remote names even if hidden\n\n(some details hidden, use --verbose to show complete help)\n")))}d.isMDXComponent=!0}}]);