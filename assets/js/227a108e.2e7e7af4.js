"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9328],{3905:(e,n,r)=>{r.d(n,{Zo:()=>m,kt:()=>u});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},m=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=l(r),u=o,f=p["".concat(c,".").concat(u)]||p[u]||d[u]||a;return r?t.createElement(f,i(i({ref:n},m),{},{components:r})):t.createElement(f,i({ref:n},m))}));function u(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5782:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var t=r(7462),o=(r(7294),r(3905));const a={},i=void 0,s={unversionedId:"Commands/record",id:"Commands/record",title:"record",description:"",source:"@site/docs/Commands/record.md",sourceDirName:"Commands",slug:"/Commands/record",permalink:"/hgcommands/docs/Commands/record",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/record.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"rebase",permalink:"/hgcommands/docs/Commands/rebase"},next:{title:"recover",permalink:"/hgcommands/docs/Commands/recover"}},c={},l=[],m={toc:l};function d(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"hg record \\[OPTION\\]... \\[FILE\\]...\n\ninteractively select changes to commit\n\n    If a list of files is omitted, all changes reported by 'hg status' will be\n    candidates for recording.\n\n    See 'hg help dates' for a list of formats valid for -d/--date.\n\n    If using the text interface (see 'hg help config'), you will be prompted\n    for whether to record changes to each modified file, and for files with\n    multiple changes, for each change to use. For each query, the following\n    responses are possible:\n\n      y - record this change\n      n - skip this change\n      e - edit this change manually\n\n      s - skip remaining changes to this file\n      f - record remaining changes to this file\n\n      d - done, skip remaining changes and files\n      a - record all changes to all remaining files\n      q - quit, recording no changes\n\n      ? - display help\n\n    This command is not available when committing a merge.\n\nOptions (\\[+\\] can be repeated):\n\n-A --addremove mark new/missing files as added/removed before committing\n--amend amend the parent of the working directory -s --secret use the\nsecret phase for committing -e --edit invoke editor on commit messages\n-m --message TEXT use text as commit message -l --logfile FILE read\ncommit message from file -d --date DATE record the specified date as\ncommit date -u --user USER record the specified user as committer -w\n--ignore-all-space ignore white space when comparing lines -b\n--ignore-space-change ignore changes in the amount of white space -B\n--ignore-blank-lines ignore changes whose lines are all blank -Z\n--ignore-space-at-eol ignore changes in whitespace at EOL -I --include\nPATTERN \\[+\\] include names matching the given patterns -X --exclude\nPATTERN \\[+\\] exclude names matching the given patterns\n\n(some details hidden, use --verbose to show complete help)\n")))}d.isMDXComponent=!0}}]);