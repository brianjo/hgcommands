"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9695],{3905:(e,o,t)=>{t.d(o,{Zo:()=>l,kt:()=>p});var n=t(7294);function r(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function c(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);o&&(n=n.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?c(Object(t),!0).forEach((function(o){r(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function s(e,o){if(null==e)return{};var t,n,r=function(e,o){if(null==e)return{};var t,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],o.indexOf(t)>=0||(r[t]=e[t]);return r}(e,o);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=n.createContext({}),m=function(e){var o=n.useContext(i),t=o;return e&&(t="function"==typeof e?e(o):a(a({},o),e)),t},l=function(e){var o=m(e.components);return n.createElement(i.Provider,{value:o},e.children)},u={inlineCode:"code",wrapper:function(e){var o=e.children;return n.createElement(n.Fragment,{},o)}},d=n.forwardRef((function(e,o){var t=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=m(t),p=r,h=d["".concat(i,".").concat(p)]||d[p]||u[p]||c;return t?n.createElement(h,a(a({ref:o},l),{},{components:t})):n.createElement(h,a({ref:o},l))}));function p(e,o){var t=arguments,r=o&&o.mdxType;if("string"==typeof e||r){var c=t.length,a=new Array(c);a[0]=d;var s={};for(var i in o)hasOwnProperty.call(o,i)&&(s[i]=o[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var m=2;m<c;m++)a[m]=t[m];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9206:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>m});var n=t(7462),r=(t(7294),t(3905));const c={},a=void 0,s={unversionedId:"Commands/cloud",id:"Commands/cloud",title:"cloud",description:"",source:"@site/docs/Commands/cloud.md",sourceDirName:"Commands",slug:"/Commands/cloud",permalink:"/hgcommands/docs/Commands/cloud",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/cloud.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"clone",permalink:"/hgcommands/docs/Commands/clone"},next:{title:"commit",permalink:"/hgcommands/docs/Commands/commit"}},i={},m=[],l={toc:m};function u(e){let{components:o,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,t,{components:o,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"hg cloud SUBCOMMAND ...\n\nbackup your commits and synchronise them via commit cloud\n\n    Commit Cloud is the modern infrastructure for backing up your draft\n    commits and bookmarks.\n\n    Commit Cloud introduces a new abstraction: the commit cloud workspace. A\n    workspace holds a set of draft commits and bookmarks. You can think of it\n    as a backup of the contents of your smartlog in the cloud. You can have\n    multiple workspaces (and so multiple smartlogs) and switch between them.\n\n    Commit cloud lets you synchronize commits and bookmarks between different\n    copies of the same repository if they are connected to the same commit\n    cloud workspace. This may be useful, for example, to keep your laptop and\n    desktop computers in sync.\n\n    Use 'hg cloud join' to connect your repository to the default commit cloud\n    workspace and get started.\n\n    Use 'hg cloud sync' to trigger a new backup and synchronization. Backups\n    and synchronizations also happen automatically in the background as you\n    create and modify commits.\n\n    Use 'hg cloud switch' to change which workspace you are connected to. Use\n    'hg cloud list' to see your workspaces.\n\n    Use 'hg cloud leave' to stop using commit cloud workspaces.\n\nConnect to a cloud workspace:\n\nauthenticate authenticate this host with the commit cloud service and\nvalidate the authentication join connect the local repository to a\ncommit cloud workspace ('default' workspace with no arguments) switch\nswitch the local repository to a different commit cloud workspace leave\ndisconnect the local repository from commit cloud\n\nSynchronize with the connected cloud workspace:\n\nsync backup and synchronize commits with the commit cloud service\n\nManage cloud workspaces:\n\ndelete Delete (archive) workspace from commit cloud undelete Restore\n(unarchive) workspace in commit cloud list list Commit Cloud workspaces\nthat are available on the server for the user rename rename Commit Cloud\nworkspace reclaim reclaim Commit Cloud workspaces to the current user\n\nView the smartlog for a cloud workspace:\n\nsl get smartlog view for the default workspace of the given user ssl get\nsuper smartlog view for the given workspace\n\nBack up commits:\n\nbackup back up commits to commit cloud check check if commits have been\nbacked up\n\nManage automatic backup or sync:\n\ndisable temporarily disable automatic backup or sync enable enable\nautomatic backup or sync\n\nOther Subcommands:\n\ngetfrombackup Downloading and applying mercurial bundles directly for\nlist of given heads hide remove commits or bookmarks from the cloud\nworkspace recover perform recovery for commit cloud rejoin reconnect the\nlocal repository to commit cloud status Shows information about the\nstate of the user's workspace upload Upload draft commits using EdenApi\nUploads\n\n(use 'hg help cloud SUBCOMMAND' to show complete subcommand help)\n\n(some details hidden, use --verbose to show complete help)\n")))}u.isMDXComponent=!0}}]);