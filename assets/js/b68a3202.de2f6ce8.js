"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5126],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(n),u=o,f=p["".concat(s,".").concat(u)]||p[u]||m[u]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const a={},i=void 0,c={unversionedId:"Commands/add",id:"Commands/add",title:"add",description:"",source:"@site/docs/Commands/add.md",sourceDirName:"Commands",slug:"/Commands/add",permalink:"/hgcommands/docs/Commands/add",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/add.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"absorb",permalink:"/hgcommands/docs/commands/"},next:{title:"addremove",permalink:"/hgcommands/docs/Commands/addremove"}},s={},d=[],l={toc:d};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"hg add \\[OPTION\\]... \\[FILE\\]...\n\nstart tracking the specified files\n\n    Specify files to be tracked by Mercurial. The files will be added to the\n    repository at the next commit.\n\n    To undo an add before files have been committed, use 'hg forget'. To undo\n    an add after files have been committed, use 'hg rm'.\n\n    If no names are given, add all files to the repository (except files\n    matching \".hgignore\").\n\n    Returns 0 if all files are successfully added.\n\nOptions (\\[+\\] can be repeated):\n\n-I --include PATTERN \\[+\\] include names matching the given patterns -X\n--exclude PATTERN \\[+\\] exclude names matching the given patterns -n\n--dry-run do not perform actions, just print output -s --sparse also\ninclude directories of added files in sparse config\n\n(some details hidden, use --verbose to show complete help)\n")))}m.isMDXComponent=!0}}]);