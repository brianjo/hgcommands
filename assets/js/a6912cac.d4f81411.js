"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[39],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(t),h=s,f=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function h(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var p=2;p<o;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1277:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(7462),s=(t(7294),t(3905));const o={},a=void 0,i={unversionedId:"Commands/sparse",id:"Commands/sparse",title:"sparse",description:"",source:"@site/docs/Commands/sparse.md",sourceDirName:"Commands",slug:"/Commands/sparse",permalink:"/docs/Commands/sparse",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/sparse.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"snapshot",permalink:"/docs/Commands/snapshot"},next:{title:"split",permalink:"/docs/Commands/split"}},l={},p=[],c={toc:p};function u(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"sparse extension - allow sparse checkouts of the working directory\n\n## Sparse file format\n\nStructure .........\n\nShared sparse profile files comprise of 4 sections: '%include'\ndirectives that pull in another sparse profile, and '\\[metadata\\]',\n'\\[include\\]' and '\\[exclude\\]' sections.\n\nAny line starting with a ';' or '\\#' character is a comment and is\nignored.\n\nExtending existing profiles ...........................\n\n'%include `<absolute path>`{=html}' directives (one per line) let you\nextend as an existing profile file, adding more include and exclude\nrules. Although this directive can appear anywere in the file, it is\nrecommended you keep these at the top of the file.\n\nMetadata ........\n\nThe '\\[metadata\\]' section lets you specify key-value pairs for the\nprofile. Anything before the first ':' or '=' is the key, everything\nafter is the value. Values can be extended over multiple lines by\nindenting additional lines.\n\nOnly the 'title', 'description' and 'hidden' keys carry meaning to for\n'hg sparse', these are used in the 'hg sparse list' and 'hg sparse\nexplain' commands. Profiles with the 'hidden' key (regardless of its\nvalue) are excluded from the 'hg sparse list' listing unless the '-v' /\n'--verbose' switch is given.\n\nInclude and exclude rules .........................\n\nEach line in the '\\[include\\]' and '\\[exclude\\]' sections is treated as\na standard pattern, see 'hg help patterns'. Exclude rules override\ninclude rules.\n\nExample .......\n\n\\# this profile extends another profile, incorporating all its rules\n%include some/base/profile\n\n\\[metadata\\] title: This is an example sparse profile description: You\ncan include as much metadata as makes sense for your setup, and values\ncan extend over multiple lines. lorem ipsum = Keys and values are\nseparated by a : or = ; hidden: the hidden key lets you mark profiles\nthat should not ; generally be discorable. The value doesn't matter, use\nit to motivate ; why it is hidden.\n\n\\[include\\] foo/bar/baz bar/python_project/\\*\\*/\\*.py\n\n\\[exclude\\] ; exclude rules override include rules, so all files with\nthe extension ; .ignore are excluded from this sparse profile.\nfoo/bar/baz/\\*.ignore\n\n## Configuration options\n\nThe following config option defines whether sparse treats supplied paths\nas relative to repo root or to the current working dir for include and\nexclude options:\n\n    [sparse] includereporootpaths = off\n\nThe following config option defines whether sparse treats supplied paths\nas relative to repo root or to the current working dir for enableprofile\nand disableprofile options:\n\n    [sparse] enablereporootpaths = on\n\nYou can configure a path to find sparse profiles in; this path is used\nto discover available sparse profiles. Nested directories are reflected\nin the UI.\n\n    [sparse] profile_directory = tools/scm/sparse\n\nIt is not set by default.\n\nIt is also possible to show hints where dirstate size is too large.\n\n    [sparse] # Whether to advertise usage of the sparse profiles when the\n    checkout size # is very large. largecheckouthint = False # The number of\n    files in the checkout that constitute a \"large checkout\".\n    largecheckoutcount = 0\n\nThe following option allows warning when a user is using a full\ncheckout. It allows four values: hint, warn, softblock, hardblock.\n\n-   \"hint\" shows a suppressable warning message.\n\n-   \"warn\" shows a non-supressable warning message.\n\n-   \"softblock\" throws an exception that can be bypassed via\n    sparse.bypassfullcheckoutwarn=True\n\n-   \"hardblock\" throws an exception that cannot be bypassed.\n\n    \\[sparse\\] warnfullcheckout = hint\n\nThe following option can be used to bypass a softblock on fullcheckouts.\n\n\\[sparse\\] bypassfullcheckoutwarn = True\n\nThe following option can be used to check if a sparse profile includes\nany files that should not normally be included.\n\n    [sparse] unsafe_sparse_profile_marker_files = \"somefile, anotherfile\"\n    unsafe_sparse_profile_message = \"do not do this!\"\n\nThe following options can be used to tune the behaviour of tree\nprefetching when sparse profile changes\n\n    [sparse] force_full_prefetch_on_sparse_profile_change = False\n\n(use 'hg help extensions' for information on enabling extensions)\n")))}u.isMDXComponent=!0}}]);