"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8697],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),h=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=h(e.components);return o.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=h(t),f=i,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||a;return t?o.createElement(m,s(s({ref:n},c),{},{components:t})):o.createElement(m,s({ref:n},c))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=u;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var h=2;h<a;h++)s[h]=t[h];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3784:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>h});var o=t(7462),i=(t(7294),t(3905));const a={},s=void 0,r={unversionedId:"Commands/config",id:"Commands/config",title:"config",description:"",source:"@site/docs/Commands/config.md",sourceDirName:"Commands",slug:"/Commands/config",permalink:"/hgcommands/docs/Commands/config",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/config.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"commit",permalink:"/hgcommands/docs/Commands/commit"},next:{title:"continue",permalink:"/hgcommands/docs/Commands/continue"}},l={},h=[],c={toc:h};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Configuration Files """""""""""""""""""\n\n    The Mercurial system uses a set of configuration files to control aspects\n    of its behavior.\n\n    Troubleshooting\n    ===============\n\n    If you\'re having problems with your configuration, \'hg config --debug\' can\n    help you understand what is introducing a setting into your environment.\n\n    See \'hg help config.syntax\' and \'hg help config.files\' for information\n    about how and where to override things.\n\n    Structure\n    =========\n\n    The configuration files use a simple ini-file format. A configuration file\n    consists of sections, led by a "[section]" header and followed by "name =\n    value" entries:\n\n      [ui]\n      username = Firstname Lastname <firstname.lastname@example.net>\n      verbose = True\n\n    The above entries will be referred to as "ui.username" and "ui.verbose",\n    respectively. See \'hg help config.syntax\'.\n\n    Files\n    =====\n\n    Mercurial reads configuration data from several files, if they exist.\n    These files do not exist by default and you will have to create the\n    appropriate configuration files yourself:\n\n    Local configuration is put into the per-repository "<repo>/.hg/hgrc" file.\n\n    Global configuration like the username setting is typically put into:\n\n    - "$HOME/.hgrc" (on Unix, Plan9)\n\n    The names of these files depend on the system on which Mercurial is\n    installed. "*.rc" files from a single directory are read in alphabetical\n    order, later ones overriding earlier ones. Where multiple paths are given\n    below, settings from earlier paths override later ones.\n\n    On Unix, the following files are consulted:\n\n    - "<repo>/.hg/hgrc" (per-repository)\n    - "$HOME/.hgrc" (per-user)\n    - "$XDG_CONFIG_HOME/hg/hgrc" (per-user)\n    - "/etc/mercurial/system.rc" (per-system)\n    - "<builtin>" (builtin)\n\n    Per-repository configuration options only apply in a particular\n    repository. This file is not version-controlled, and will not get\n    transferred during a "clone" operation. Options in this file override\n    options in all other configuration files.\n\n    Per-user configuration file(s) are for the user running Mercurial.\n    Options in these files apply to all Mercurial commands executed by this\n    user in any directory. Options in these files override per-system and per-\n    installation options.\n\n    Per-installation configuration files are searched for in the directory\n    where Mercurial is installed. "<install-root>" is the parent directory of\n    the **hg** executable (or symlink) being run.\n\n    For example, if installed in "/shared/tools/bin/hg", Mercurial will look\n    in "/shared/tools/etc/mercurial/hgrc". Options in these files apply to all\n    Mercurial commands executed by any user in any directory.\n\n    Per-installation configuration files are for the system on which Mercurial\n    is running. Options in these files apply to all Mercurial commands\n    executed by any user in any directory. Registry keys contain PATH-like\n    strings, every part of which must reference a "Mercurial.ini" file or be a\n    directory where "*.rc" files will be read.  Mercurial checks each of these\n    locations in the specified order until one or more configuration files are\n    detected.\n\n    Per-system configuration files are for the system on which Mercurial is\n    running. Options in these files apply to all Mercurial commands executed\n    by any user in any directory. Options in these files override per-\n    installation options.\n\n    Mercurial comes with some default configuration. The default configuration\n    files are installed with Mercurial and will be overwritten on upgrades.\n    Default configuration files should never be edited by users or\n    administrators but can be overridden in other configuration files. So far\n    the directory only contains merge tool configuration but packagers can\n    also put other default configuration there.\n\n    Warning: Running hg inside, pushing to, pulling from, or cloning local\n    repositories owned by other users will load the their config files. That\n    could be potentially harmful. A config file can run arbitrary code by\n    defining extensions or hooks.\n\n    Syntax\n    ======\n\n    A configuration file consists of sections, led by a "[section]" header and\n    followed by "name = value" entries (sometimes called "configuration\n    keys"):\n\n      [spam]\n      eggs=ham\n      green=\n         eggs\n\n    Each line contains one entry. If the lines that follow are indented, they\n    are treated as continuations of that entry. Leading whitespace is removed\n    from values. Empty lines are skipped. Lines beginning with "#" or ";" are\n    ignored and may be used to provide comments.\n\n    Configuration keys can be set multiple times, in which case Mercurial will\n    use the value that was configured last. As an example:\n\n      [spam]\n      eggs=large\n      ham=serrano\n      eggs=small\n\n    This would set the configuration key named "eggs" to "small".\n\n    It is also possible to define a section multiple times. A section can be\n    redefined on the same and/or on different configuration files. For\n    example:\n\n      [foo]\n      eggs=large\n      ham=serrano\n      eggs=small\n\n      [bar]\n      eggs=ham\n      green=\n         eggs\n\n      [foo]\n      ham=prosciutto\n      eggs=medium\n      bread=toasted\n\n    This would set the "eggs", "ham", and "bread" configuration keys of the\n    "foo" section to "medium", "prosciutto", and "toasted", respectively. As\n    you can see there only thing that matters is the last value that was set\n    for each of the configuration keys.\n\n    If a configuration key is set multiple times in different configuration\n    files the final value will depend on the order in which the different\n    configuration files are read, with settings from earlier paths overriding\n    later ones as described on the "Files" section above.\n\n    A line of the form "%include file" will include "file" into the current\n    configuration file. The inclusion is recursive, which means that included\n    files can include other files. Filenames are relative to the configuration\n    file in which the "%include" directive is found. Environment variables and\n    "~user" constructs are expanded in "file". This lets you do something\n    like:\n\n      %include ~/.hgrc.d/$HOST.rc\n\n    to include a different configuration file on each computer you use.\n\n    A line with "%unset name" will remove "name" from the current section, if\n    it has been set previously.\n\n    The values are either free-form text strings, lists of text strings, or\n    Boolean values. Boolean values can be set to true using any of "1", "yes",\n    "true", or "on" and to false using "0", "no", "false", or "off" (all case\n    insensitive).\n\n    List values are separated by whitespace or comma, except when values are\n    placed in double quotation marks:\n\n      allow_read = "John Doe, PhD", brian, betty\n\n    Quotation marks can be escaped by prefixing them with a backslash. Only\n    quotation marks at the beginning of a word is counted as a quotation\n    (e.g., "foo"bar baz" is the list of "foo"bar" and "baz").\n\n    Sections\n    ========\n\n    This section describes the different sections that may appear in a\n    Mercurial configuration file, the purpose of each section, its possible\n    keys, and their possible values.\n\n    "alias"\n    -------\n\n    Defines command aliases.\n\n    Aliases allow you to define your own commands in terms of other commands\n    (or aliases), optionally including arguments. Positional arguments in the\n    form of "$1", "$2", etc. in the alias definition are expanded by Mercurial\n    before execution. Positional arguments not already used by "$N" in the\n    definition are put at the end of the command to be executed.\n\n    Alias definitions consist of lines of the form:\n\n      <alias> = <command> [<argument>]...\n\n    For example, this definition:\n\n      latest = log --limit 5\n\n    creates a new command "latest" that shows only the five most recent\n    commits. You can define subsequent aliases using earlier ones:\n\n      stable5 = latest -b stable\n\n    Note:\n       It is possible to create aliases with the same names as existing\n       commands, which will then override the original definitions. This is\n       almost always a bad idea!\n\n    An alias can start with an exclamation point ("!") to make it a shell\n    alias. A shell alias is executed with the shell and will let you run\n    arbitrary commands. As an example,\n\n      echo = !echo $@\n\n    will let you do "hg echo foo" to have "foo" printed in your terminal. A\n    better example might be:\n\n      purge = !$HG status --no-status --unknown -0 re: | xargs -0 rm -f\n\n    which will make "hg purge" delete all unknown files in the repository in\n    the same manner as the purge extension.\n\n    Positional arguments like "$1", "$2", etc. in the alias definition expand\n    to the command arguments. Unmatched arguments are removed. "$0" expands to\n    the alias name and "$@" expands to all arguments separated by a space.\n    ""$@"" (with quotes) expands to all arguments quoted individually and\n    separated by a space. These expansions happen before the command is passed\n    to the shell.\n\n    Shell aliases are executed in an environment where "$HG" expands to the\n    path of the Mercurial that was used to execute the alias. This is useful\n    when you want to call further Mercurial commands in a shell alias, as was\n    done above for the purge alias. In addition, "$HG_ARGS" expands to the\n    arguments given to Mercurial. In the "hg echo foo" call above, "$HG_ARGS"\n    would expand to "echo foo".\n\n    Note:\n       Some global configuration options such as "-R" are processed before\n       shell aliases and will thus not be passed to aliases.\n\n    "annotate"\n    ----------\n\n    Settings used when displaying file annotations. All values are Booleans\n    and default to False. See \'hg help config.diff\' for related options for\n    the diff command.\n\n    "ignorews"\n        Ignore white space when comparing lines.\n\n    "ignorewseol"\n        Ignore white space at the end of a line when comparing lines.\n\n    "ignorewsamount"\n        Ignore changes in the amount of white space.\n\n    "ignoreblanklines"\n        Ignore changes whose lines are all blank.\n\n    "auth"\n    ------\n\n    Authentication credentials and other authentication-like configuration for\n    HTTP connections. This section allows you to store usernames and passwords\n    for use when logging *into* HTTP servers. See \'hg help config.web\' if you\n    want to configure *who* can login to your HTTP server.\n\n    The following options apply to all hosts.\n\n    "cookiefile"\n        Path to a file containing HTTP cookie lines. Cookies matching a host\n        will be sent automatically.\n\n        The file format uses the Mozilla cookies.txt format, which defines\n        cookies on their own lines. Each line contains 7 fields delimited by\n        the tab character (domain, is_domain_cookie, path, is_secure, expires,\n        name, value). For more info, do an Internet search for "Netscape\n        cookies.txt format."\n\n        Note: the cookies parser does not handle port numbers on domains. You\n        will need to remove ports from the domain for the cookie to be\n        recognized. This could result in a cookie being disclosed to an\n        unwanted server.\n\n        The cookies file is read-only.\n\n    Other options in this section are grouped by name and have the following\n    format:\n\n      <name>.<argument> = <value>\n\n    where "<name>" is used to group arguments into authentication entries.\n    Example:\n\n      foo.prefix = hg.intevation.de/mercurial\n      foo.username = foo\n      foo.password = bar\n      foo.schemes = http https\n\n      bar.prefix = secure.example.org\n      bar.key = path/to/file.key\n      bar.cert = path/to/file.cert\n      bar.schemes = https\n\n    Supported arguments:\n\n    "prefix"\n        Either "*" or a URI prefix with or without the scheme part. The\n        authentication entry with the longest matching prefix is used (where\n        "*" matches everything and counts as a match of length 1). If the\n        prefix doesn\'t include a scheme, the match is performed against the\n        URI with its scheme stripped as well, and the schemes argument, q.v.,\n        is then subsequently consulted.\n\n    "username"\n        Optional. Username to authenticate with. If not given, and the remote\n        site requires basic or digest authentication, the user will be\n        prompted for it. Environment variables are expanded in the username\n        letting you do "foo.username = $USER". If the URI includes a username,\n        only "[auth]" entries with a matching username or without a username\n        will be considered.\n\n    "password"\n        Optional. Password to authenticate with. If not given, and the remote\n        site requires basic or digest authentication, the user will be\n        prompted for it.\n\n    "key"\n        Optional. PEM encoded client certificate key file. Environment\n        variables are expanded in the filename.\n\n    "cert"\n        Optional. PEM encoded client certificate chain file. Environment\n        variables are expanded in the filename.\n\n    "schemes"\n        Optional. Space separated list of URI schemes to use this\n        authentication entry with. Only used if the prefix doesn\'t include a\n        scheme. Supported schemes are http and https. They will match static-\n        http and static-https respectively, as well. (default: https)\n\n    If no suitable authentication entry is found, the user is prompted for\n    credentials as usual if required by the remote.\n\n    "color"\n    -------\n\n    Configure the Mercurial color mode. For details about how to define your\n    custom effect and style see \'hg help color\'.\n\n    "mode"\n        String: control the method used to output color. One of "auto",\n        "ansi", "win32", or "debug". In auto mode, Mercurial will use ANSI\n        mode by default (or win32 mode prior to Windows 10) if it detects a\n        terminal. Any invalid value will disable color.\n\n    "commands"\n    ----------\n\n    "status.relative"\n        Make paths in \'hg status\' output relative to the current directory.\n        (default: False)\n\n    "update.check"\n        Determines what level of checking \'hg update\' will perform before\n        moving to a destination revision. Valid values are "abort", "none",\n        "linear", and "noconflict". "abort" always fails if the working\n        directory has uncommitted changes. "none" performs no checking, and\n        may result in a merge with uncommitted changes. "linear" allows any\n        update as long as it follows a straight line in the revision history,\n        and may trigger a merge with uncommitted changes. "noconflict" will\n        allow any update which would not trigger a merge with uncommitted\n        changes, if any are present. (default: "linear")\n\n    "update.requiredest"\n        Require that the user pass a destination when running \'hg update\'. For\n        example, \'hg update .::\' will be allowed, but a plain \'hg update\' will\n        be disallowed. (default: False)\n\n    "commit"\n    --------\n\n    "description-size-limit"\n        Maximum length (in bytes) of the description for new commits.  Set\n        this to a reasonable value to prevent accidentally creating commits\n        with very large commit messages.\n\n    "extras-size-limit"\n        Maximum total size (in bytes) of the commit extras for new commits.\n        Set this to a reasonable value to prevent accidentally creating\n        commits with very large metadata.\n\n    "committemplate"\n    ----------------\n\n    "commit"\n        String: configuration in this section is used as the template to\n        customize the text shown in the editor when committing.\n\n    In addition to pre-defined template keywords, commit log specific one\n    below can be used for customization:\n\n    "extramsg"\n        String: Extra message (typically \'Leave message empty to abort\n        commit.\'). This may be changed by some commands or extensions.\n\n    For example, the template configuration below shows as same text as one\n    shown by default:\n\n      [committemplate]\n      commit = {desc}\\n\\n\n          HG: Enter commit message.  Lines beginning with \'HG:\' are removed.\n          HG: {extramsg}\n          HG: --\n          HG: user: {author}\\n{ifeq(p2rev, "-1", "",\n         "HG: branch merge\\n")\n         }HG: branch \'{branch}\'\\n{if(activebookmark,\n         "HG: bookmark \'{activebookmark}\'\\n")   }{file_adds %\n         "HG: added {file}\\n"                   }{file_mods %\n         "HG: changed {file}\\n"                 }{file_dels %\n         "HG: removed {file}\\n"                 }{if(files, "",\n         "HG: no files changed\\n")}\n\n    "diff()"\n        String: show the diff (see \'hg help templates\' for detail)\n\n    Sometimes it is helpful to show the diff of the commit in the editor\n    without having to prefix \'HG: \' to each line so that highlighting works\n    correctly. For this, Mercurial provides a special string which will ignore\n    everything below it:\n\n      HG: ------------------------ >8 ------------------------\n\n    For example, the template configuration below will show the diff below the\n    extra message:\n\n      [committemplate]\n      commit = {desc}\\n\\n\n          HG: Enter commit message.  Lines beginning with \'HG:\' are removed.\n          HG: {extramsg}\n          HG: ------------------------ >8 ------------------------\n          HG: Do not touch the line above.\n          HG: Everything below will be removed.\n          {diff()}\n\n    Note:\n       For some problematic encodings (see \'hg help win32mbcs\' for detail),\n       this customization should be configured carefully, to avoid showing\n       broken characters.\n\n       For example, if a multibyte character ending with backslash (0x5c) is\n       followed by the ASCII character \'n\' in the customized template, the\n       sequence of backslash and \'n\' is treated as line-feed unexpectedly (and\n       the multibyte character is broken, too).\n\n    Customized template is used for commands below ("--edit" may be required):\n\n    - \'hg backout\'\n    - \'hg commit\'\n    - \'hg fetch\' (for merge commit only)\n    - \'hg graft\'\n    - \'hg histedit\'\n    - \'hg import\'\n    - \'hg qfold\', \'hg qnew\' and \'hg qrefresh\'\n    - \'hg rebase\'\n    - \'hg shelve\'\n    - \'hg sign\'\n    - \'hg tag\'\n    - \'hg transplant\'\n\n    Configuring items below instead of "commit" allows showing customized\n    message only for specific actions, or showing different messages for each\n    action.\n\n    - "commit.backout" for \'hg backout\'\n    - "commit.commit.amend.merge" for \'hg commit --amend\' on merges\n    - "commit.commit.amend.normal" for \'hg commit --amend\' on other\n    - "commit.commit.normal.merge" for \'hg commit\' on merges\n    - "commit.commit.normal.normal" for \'hg commit\' on other\n    - "commit.fetch" for \'hg fetch\' (impling merge commit)\n    - "commit.gpg.sign" for \'hg sign\'\n    - "commit.graft" for \'hg graft\'\n    - "commit.histedit.edit" for "edit" of \'hg histedit\'\n    - "commit.histedit.fold" for "fold" of \'hg histedit\'\n    - "commit.histedit.mess" for "mess" of \'hg histedit\'\n    - "commit.histedit.pick" for "pick" of \'hg histedit\'\n    - "commit.import.bypass" for \'hg import --bypass\'\n    - "commit.import.normal.merge" for \'hg import\' on merges\n    - "commit.import.normal.normal" for \'hg import\' on other\n    - "commit.rebase.collapse" for \'hg rebase --collapse\'\n    - "commit.rebase.merge" for \'hg rebase\' on merges\n    - "commit.rebase.normal" for \'hg rebase\' on other\n    - "commit.shelve.shelve" for \'hg shelve\'\n    - "commit.tag.add" for \'hg tag\' without "--remove"\n    - "commit.tag.remove" for \'hg tag --remove\'\n    - "commit.transplant.merge" for \'hg transplant\' on merges\n    - "commit.transplant.normal" for \'hg transplant\' on other\n\n    These dot-separated lists of names are treated as hierarchical ones. For\n    example, "commit.tag.remove" customizes the commit message only for \'hg\n    tag --remove\', but "commit.tag" customizes the commit message for \'hg tag\'\n    regardless of "--remove" option.\n\n    When the external editor is invoked for a commit, the corresponding dot-\n    separated list of names without the "commit." prefix (e.g.\n    "commit.normal.normal") is in the "HGEDITFORM" environment variable.\n\n    In this section, items other than "commit" can be referred from others.\n    For example, the configuration to list committed files up below can be\n    referred as "{listupfiles}":\n\n      [committemplate]\n      listupfiles = {file_adds %\n         "HG: added {file}\\n"     }{file_mods %\n         "HG: changed {file}\\n"   }{file_dels %\n         "HG: removed {file}\\n"   }{if(files, "",\n         "HG: no files changed\\n")}\n\n    "common"\n    --------\n\n    "reponame"\n        String: Name of the repo. Mostly intended to be used server-side to\n        get the canonical name of the repository\n\n    "connectionpool"\n    ----------------\n\n    "lifetime"\n        Number of seconds for which connections in the connection pool can be\n        kept and reused.  Connections that are older than this won\'t be\n        reused.\n\n    "decode/encode"\n    ---------------\n\n    Filters for transforming files on checkout/checkin. This would typically\n    be used for newline processing or other localization/canonicalization of\n    files.\n\n    Filters consist of a filter pattern followed by a filter command. Filter\n    patterns are globs by default, rooted at the repository root. For example,\n    to match any file ending in ".txt" in the root directory only, use the\n    pattern "*.txt". To match any file ending in ".c" anywhere in the\n    repository, use the pattern "**.c". For each file only the first matching\n    filter applies.\n\n    The filter command can start with a specifier, either "pipe:" or\n    "tempfile:". If no specifier is given, "pipe:" is used by default.\n\n    A "pipe:" command must accept data on stdin and return the transformed\n    data on stdout.\n\n    Pipe example:\n\n      [encode]\n      # uncompress gzip files on checkin to improve delta compression\n      # note: not necessarily a good idea, just an example\n      *.gz = pipe: gunzip\n\n      [decode]\n      # recompress gzip files when writing them to the working dir (we\n      # can safely omit "pipe:", because it\'s the default)\n      *.gz = gzip\n\n    A "tempfile:" command is a template. The string "INFILE" is replaced with\n    the name of a temporary file that contains the data to be filtered by the\n    command. The string "OUTFILE" is replaced with the name of an empty\n    temporary file, where the filtered data must be written by the command.\n\n    This filter mechanism is used internally by the "eol" extension to\n    translate line ending characters between Windows (CRLF) and Unix (LF)\n    format. We suggest you use the "eol" extension for convenience.\n\n    "defaults"\n    ----------\n\n    (defaults are deprecated. Don\'t use them. Use aliases instead.)\n\n    Use the "[defaults]" section to define command defaults, i.e. the default\n    options/arguments to pass to the specified commands.\n\n    The following example makes \'hg log\' run in verbose mode, and \'hg status\'\n    show only the modified files, by default:\n\n      [defaults]\n      log = -v\n      status = -m\n\n    The actual commands, instead of their aliases, must be used when defining\n    command defaults. The command defaults will also be applied to the aliases\n    of the commands defined.\n\n    "diff"\n    ------\n\n    Settings used when displaying diffs. Everything except for "unified" is a\n    Boolean and defaults to False. See \'hg help config.annotate\' for related\n    options for the annotate command.\n\n    "git"\n        Use git extended diff format.\n\n    "nobinary"\n        Omit git binary patches.\n\n    "nodates"\n        Don\'t include dates in diff headers.\n\n    "noprefix"\n        Omit \'a/\' and \'b/\' prefixes from filenames. Ignored in plain mode.\n\n    "showfunc"\n        Show which function each change is in.\n\n    "ignorews"\n        Ignore white space when comparing lines.\n\n    "ignorewsamount"\n        Ignore changes in the amount of white space.\n\n    "ignoreblanklines"\n        Ignore changes whose lines are all blank.\n\n    "unified"\n        Number of lines of context to show.\n\n    "hashbinary"\n        Show a SHA-1 hash of changed binaries in diff output.\n\n    "filtercopysource"\n        Ignore copies or renames if the source path is outside file patterns.\n\n    "edenfs" ---------\n\n    Options that control the behavior of EdenFS.\n\n    "tree-fetch-depth"\n        How many layers of children trees to fetch when downloading a\n        directory listing from the servers.  Higher values increase the\n        latency of individual fetch operations, but potentially help save\n        having to send separate fetch requests later to download any child\n        trees that are needed.\n\n    "email"\n    -------\n\n    Settings for extensions that send email messages.\n\n    "from"\n        Optional. Email address to use in "From" header and SMTP envelope of\n        outgoing messages.\n\n    "to"\n        Optional. Comma-separated list of recipients\' email addresses.\n\n    "cc"\n        Optional. Comma-separated list of carbon copy recipients\' email\n        addresses.\n\n    "bcc"\n        Optional. Comma-separated list of blind carbon copy recipients\' email\n        addresses.\n\n    "method"\n        Optional. Method to use to send email messages. If value is "smtp"\n        (default), use SMTP (see the "[smtp]" section for configuration).\n        Otherwise, use as name of program to run that acts like sendmail\n        (takes "-f" option for sender, list of recipients on command line,\n        message on stdin). Normally, setting this to "sendmail" or\n        "/usr/sbin/sendmail" is enough to use sendmail to send messages.\n\n    "charsets"\n        Optional. Comma-separated list of character sets considered convenient\n        for recipients. Addresses, headers, and parts not containing patches\n        of outgoing messages will be encoded in the first character set to\n        which conversion from local encoding ("$HGENCODING",\n        "ui.fallbackencoding") succeeds. If correct conversion fails, the text\n        in question is sent as is. (default: \'\')\n\n        Order of outgoing email character sets:\n\n        1. "us-ascii": always first, regardless of settings\n        2. "email.charsets": in order given by user\n        3. "ui.fallbackencoding": if not in email.charsets\n        4. "$HGENCODING": if not in email.charsets\n        5. "utf-8": always last, regardless of settings\n\n    Email example:\n\n      [email]\n      from = Joseph User <joe.user@example.com>\n      method = /usr/sbin/sendmail\n      # charsets for western Europeans\n      # us-ascii, utf-8 omitted, as they are tried first and last\n      charsets = iso-8859-1, iso-8859-15, windows-1252\n\n    "extensions"\n    ------------\n\n    Mercurial has an extension mechanism for adding new features. To enable an\n    extension, create an entry for it in this section.\n\n    If you know that the extension is already in Python\'s search path, you can\n    give the name of the module, followed by "=", with nothing after the "=".\n\n    Otherwise, give a name that you choose, followed by "=", followed by the\n    path to the ".py" file (including the file name extension) that defines\n    the extension.\n\n    To explicitly disable an extension that is enabled in an hgrc of broader\n    scope, prepend its path with "!", as in "foo = !/ext/path" or "foo = !"\n    when path is not supplied.\n\n    Example for "~/.hgrc":\n\n      [extensions]\n      # (the amend extension will get loaded from Mercurial\'s path)\n      amend =\n      # (this extension will get loaded from the file specified)\n      myfeature = ~/.hgext/myfeature.py\n\n    "format"\n    --------\n\n    "usegeneraldelta"\n        Enable or disable the "generaldelta" repository format which improves\n        repository compression by allowing "revlog" to store delta against\n        arbitrary revision instead of the previous stored one. This provides\n        significant improvement for repositories with branches.\n\n        Repositories with this on-disk format require Mercurial version 1.9.\n\n        Enabled by default.\n\n    "dirstate"\n        Dirstate format version to use. One of 0 (flat dirstate), 1\n        (treedirstate), and 2 (treestate). Default is 1.\n\n    "uselz4"\n        Enable or disable the lz4 compression format on the revlogs.\n\n    "cgdeltabase"\n        Control the delta base of revisions in a changegroup. Could be one of:\n        "default", "no-external", "always-null", or "default". "default" means\n        delta base can be any revision. "no-external" limits delta bases to be\n        only revisions in a same changegroup. "always-null" enforces deltas to\n        be the "null" revision, effectively making revisions full texts.\n\n        Default: "default".\n\n    "graph"\n    -------\n\n    Web graph view configuration. This section let you change graph elements\n    display properties by branches, for instance to make the "default" branch\n    stand out.\n\n    Each line has the following format:\n\n      <branch>.<argument> = <value>\n\n    where "<branch>" is the name of the branch being customized. Example:\n\n      [graph]\n      # 2px width\n      default.width = 2\n      # red color\n      default.color = FF0000\n\n    Supported arguments:\n\n    "width"\n        Set branch edges width in pixels.\n\n    "color"\n        Set branch edges color in hexadecimal RGB notation.\n\n    "help"\n    ------\n\n    "localhelp"\n        Additional information to display at the end of "hg help".\n\n    "hint"\n    ------\n\n    Some commands show hints about features, like:\n\n      hint[import]: use \'hg import\' to import commits exported by \'hg export\'\n\n    They can be silenced by "hg hint --ack import", which writes the\n    "hint.ack" config in user hgrc.\n\n    "ack"\n        A list of hint IDs that were acknowledged so they will not be shown\n        again. If set to "*", silence all hints.\n\n    "hooks"\n    -------\n\n    Commands or Python functions that get automatically executed by various\n    actions such as starting or finishing a commit. Multiple hooks can be run\n    for the same action by appending a suffix to the action. Overriding a\n    site-wide hook can be done by changing its value or setting it to an empty\n    string.  Hooks can be prioritized by adding a prefix of "priority." to the\n    hook name on a new line and setting the priority. The default priority is\n    0.\n\n    Example ".hg/hgrc":\n\n      [hooks]\n      # update working directory after adding commits\n      changegroup.update = hg update\n      # do not use the site-wide hook\n      incoming =\n      incoming.email = /my/email/hook\n      incoming.autobuild = /my/build/hook\n      # force autobuild hook to run before other incoming hooks\n      priority.incoming.autobuild = 1\n\n    Most hooks are run with environment variables set that give useful\n    additional information. For each hook below, the environment variables it\n    is passed are listed with names in the form "$HG_foo". The "$HG_HOOKTYPE"\n    and "$HG_HOOKNAME" variables are set for all hooks. They contain the type\n    of hook which triggered the run and the full name of the hook in the\n    config, respectively. In the example above, this will be\n    "$HG_HOOKTYPE=incoming" and "$HG_HOOKNAME=incoming.email".\n\n    "changegroup"\n      Run after a changegroup has been added via push, pull or unbundle.  The\n      ID of the first new commit is in "$HG_NODE" and last is in\n      "$HG_NODE_LAST". The URL from which changes came is in "$HG_URL".\n\n    "commit"\n      Run after a commit has been created in the local repository. The ID of\n      the newly created commit is in "$HG_NODE". Parent commit IDs are in\n      "$HG_PARENT1" and "$HG_PARENT2".\n\n    "incoming"\n      Run after a commit has been pulled, pushed, or unbundled into the local\n      repository. The ID of the newly arrived commit is in "$HG_NODE". The URL\n      that was source of the changes is in "$HG_URL".\n\n    "outgoing"\n      Run after sending changes from the local repository to another. The ID\n      of first commit sent is in "$HG_NODE". The source of operation is in\n      "$HG_SOURCE". Also see \'hg help config.hooks.preoutgoing\'.\n\n    "post-<command>"\n      Run after successful invocations of the associated command. The contents\n      of the command line are passed as "$HG_ARGS" and the result code in\n      "$HG_RESULT". Parsed command line arguments are passed as "$HG_PATS" and\n      "$HG_OPTS". These contain string representations of the python data\n      internally passed to <command>. "$HG_OPTS" is a dictionary of options\n      (with unspecified options set to their defaults). "$HG_PATS" is a list\n      of arguments. Hook failure is ignored.\n\n    "fail-<command>"\n      Run after a failed invocation of an associated command. The contents of\n      the command line are passed as "$HG_ARGS". Parsed command line arguments\n      are passed as "$HG_PATS" and "$HG_OPTS". These contain string\n      representations of the python data internally passed to <command>.\n      "$HG_OPTS" is a dictionary of options (with unspecified options set to\n      their defaults). "$HG_PATS" is a list of arguments. Hook failure is\n      ignored.\n\n    "pre-<command>"\n      Run before executing the associated command. The contents of the command\n      line are passed as "$HG_ARGS". Parsed command line arguments are passed\n      as "$HG_PATS" and "$HG_OPTS". These contain string representations of\n      the data internally passed to <command>. "$HG_OPTS" is a dictionary of\n      options (with unspecified options set to their defaults). "$HG_PATS" is\n      a list of arguments. If the hook returns failure, the command doesn\'t\n      execute and Mercurial returns the failure code.\n\n    "prechangegroup"\n      Run before a changegroup is added via push, pull or unbundle. Exit\n      status 0 allows the changegroup to proceed. A non-zero status will cause\n      the push, pull or unbundle to fail. The URL from which changes will come\n      is in "$HG_URL".\n\n    "precommit"\n      Run before starting a local commit. Exit status 0 allows the commit to\n      proceed. A non-zero status will cause the commit to fail. Parent commit\n      IDs are in "$HG_PARENT1" and "$HG_PARENT2".\n\n    "prelistkeys"\n      Run before listing pushkeys (like bookmarks) in the repository. A non-\n      zero status will cause failure. The key namespace is in "$HG_NAMESPACE".\n\n    "preoutgoing"\n      Run before collecting changes to send from the local repository to\n      another. A non-zero status will cause failure. This lets you prevent\n      pull over HTTP or SSH. It can also prevent propagating commits (via\n      local pull, push (outbound) or bundle commands), but not completely,\n      since you can just copy files instead. The source of operation is in\n      "$HG_SOURCE". If "serve", the operation is happening on behalf of a\n      remote SSH or HTTP repository. If "push", "pull" or "bundle", the\n      operation is happening on behalf of a repository on same system.\n\n    "prepushkey"\n      Run before a pushkey (like a bookmark) is added to the repository. A\n      non-zero status will cause the key to be rejected. The key namespace is\n      in "$HG_NAMESPACE", the key is in "$HG_KEY", the old value (if any) is\n      in "$HG_OLD", and the new value is in "$HG_NEW".\n\n    "pretag"\n      Run before creating a tag. Exit status 0 allows the tag to be created. A\n      non-zero status will cause the tag to fail. The ID of the commit to tag\n      is in "$HG_NODE". The name of tag is in "$HG_TAG". The tag is local if\n      "$HG_LOCAL=1", or in the repository if "$HG_LOCAL=0".\n\n    "pretxnopen"\n      Run before any new repository transaction is open. The reason for the\n      transaction will be in "$HG_TXNNAME", and a unique identifier for the\n      transaction will be in "HG_TXNID". A non-zero status will prevent the\n      transaction from being opened.\n\n    "pretxnclose"\n      Run right before the transaction is actually finalized. Any repository\n      change will be visible to the hook program. This lets you validate the\n      transaction content or change it. Exit status 0 allows the commit to\n      proceed. A non-zero status will cause the transaction to be rolled back.\n      The reason for the transaction opening will be in "$HG_TXNNAME", and a\n      unique identifier for the transaction will be in "HG_TXNID". The rest of\n      the available data will vary according the transaction type. New commits\n      will add "$HG_NODE" (the ID of the first added commit), "$HG_NODE_LAST"\n      (the ID of the last added commit), "$HG_URL" and "$HG_SOURCE" variables.\n      Bookmark and phase changes will set "HG_BOOKMARK_MOVED" and\n      "HG_PHASES_MOVED" to "1" respectively, etc.\n\n    "pretxnclose-bookmark"\n      Run right before a bookmark change is actually finalized. Any repository\n      change will be visible to the hook program. This lets you validate the\n      transaction content or change it. Exit status 0 allows the commit to\n      proceed. A non-zero status will cause the transaction to be rolled back.\n      The name of the bookmark will be available in "$HG_BOOKMARK", the new\n      bookmark location will be available in "$HG_NODE" while the previous\n      location will be available in "$HG_OLDNODE". In case of a bookmark\n      creation "$HG_OLDNODE" will be empty. In case of deletion "$HG_NODE"\n      will be empty. In addition, the reason for the transaction opening will\n      be in "$HG_TXNNAME", and a unique identifier for the transaction will be\n      in "HG_TXNID".\n\n    "pretxnclose-phase"\n      Run right before a phase change is actually finalized. Any repository\n      change will be visible to the hook program. This lets you validate the\n      transaction content or change it. Exit status 0 allows the commit to\n      proceed.  A non-zero status will cause the transaction to be rolled\n      back. The hook is called multiple times, once for each revision affected\n      by a phase change. The affected node is available in "$HG_NODE", the\n      phase in "$HG_PHASE" while the previous "$HG_OLDPHASE". In case of new\n      node, "$HG_OLDPHASE" will be empty.  In addition, the reason for the\n      transaction opening will be in "$HG_TXNNAME", and a unique identifier\n      for the transaction will be in "HG_TXNID". The hook is also run for\n      newly added revisions. In this case the "$HG_OLDPHASE" entry will be\n      empty.\n\n    "txnclose"\n      Run after any repository transaction has been committed. At this point,\n      the transaction can no longer be rolled back. The hook will run after\n      the lock is released. See \'hg help config.hooks.pretxnclose\' for details\n      about available variables.\n\n    "txnclose-bookmark"\n      Run after any bookmark change has been committed. At this point, the\n      transaction can no longer be rolled back. The hook will run after the\n      lock is released. See \'hg help config.hooks.pretxnclose-bookmark\' for\n      details about available variables.\n\n    "txnclose-phase"\n      Run after any phase change has been committed. At this point, the\n      transaction can no longer be rolled back. The hook will run after the\n      lock is released. See \'hg help config.hooks.pretxnclose-phase\' for\n      details about available variables.\n\n    "txnabort"\n      Run when a transaction is aborted. See \'hg help\n      config.hooks.pretxnclose\' for details about available variables.\n\n    "pretxnchangegroup"\n      Run after a changegroup has been added via push, pull or unbundle, but\n      before the transaction has been committed. The changegroup is visible to\n      the hook program. This allows validation of incoming changes before\n      accepting them. The ID of the first new commit is in "$HG_NODE" and last\n      is in "$HG_NODE_LAST". Exit status 0 allows the transaction to commit. A\n      non-zero status will cause the transaction to be rolled back, and the\n      push, pull or unbundle will fail. The URL that was the source of changes\n      is in "$HG_URL".\n\n    "pretxncommit"\n      Run after a commit has been created, but before the transaction is\n      committed. The commit is visible to the hook program. This allows\n      validation of the commit message and changes. Exit status 0 allows the\n      commit to proceed. A non-zero status will cause the transaction to be\n      rolled back. The ID of the new commit is in "$HG_NODE". The parent\n      commit IDs are in "$HG_PARENT1" and "$HG_PARENT2".\n\n    "preupdate"\n      Run before updating the working directory. Exit status 0 allows the\n      update to proceed. A non-zero status will prevent the update. The commit\n      ID of first new parent is in "$HG_PARENT1". If updating to a merge, the\n      ID of second new parent is in "$HG_PARENT2".\n\n    "listkeys"\n      Run after listing pushkeys (like bookmarks) in the repository. The key\n      namespace is in "$HG_NAMESPACE". "$HG_VALUES" is a dictionary containing\n      the keys and values.\n\n    "pushkey"\n      Run after a pushkey (like a bookmark) is added to the repository. The\n      key namespace is in "$HG_NAMESPACE", the key is in "$HG_KEY", the old\n      value (if any) is in "$HG_OLD", and the new value is in "$HG_NEW".\n\n    "tag"\n      Run after a tag is created. The ID of the tagged commit is in\n      "$HG_NODE". The name of tag is in "$HG_TAG". The tag is local if\n      "$HG_LOCAL=1", or in the repository if "$HG_LOCAL=0".\n\n    "update"\n      Run after updating the working directory. The commit ID of first new\n      parent is in "$HG_PARENT1". If updating to a merge, the ID of second new\n      parent is in "$HG_PARENT2". If the update succeeded, "$HG_ERROR=0". If\n      the update failed (e.g. because conflicts were not resolved),\n      "$HG_ERROR=1".\n\n    Note:\n       It is generally better to use standard hooks rather than the generic\n       pre- and post- command hooks, as they are guaranteed to be called in\n       the appropriate contexts for influencing transactions. Also, hooks like\n       "commit" will be called in all contexts that generate a commit (e.g.\n       tag) and not just the commit command.\n\n    Note:\n       Environment variables with empty values may not be passed to hooks on\n       platforms such as Windows. As an example, "$HG_PARENT2" will have an\n       empty value under Unix-like platforms for non-merge commits, while it\n       will not be available at all under Windows.\n\n    The syntax for Python hooks is as follows:\n\n      hookname = python:modulename.submodule.callable\n      hookname = python:/path/to/python/module.py:callable\n\n    Python hooks are run within the Mercurial process. Each hook is called\n    with at least three keyword arguments: a ui object (keyword "ui"), a\n    repository object (keyword "repo"), and a "hooktype" keyword that tells\n    what kind of hook is used. Arguments listed as environment variables above\n    are passed as keyword arguments, with no "HG_" prefix, and names in lower\n    case.\n\n    If a Python hook returns a "true" value or raises an exception, this is\n    treated as a failure.\n\n    "hostfingerprints"\n    ------------------\n\n    (Deprecated. Use "[hostsecurity]"\'s "fingerprints" options instead.)\n\n    Fingerprints of the certificates of known HTTPS servers.\n\n    A HTTPS connection to a server with a fingerprint configured here will\n    only succeed if the servers certificate matches the fingerprint. This is\n    very similar to how ssh known hosts works.\n\n    The fingerprint is the SHA-1 hash value of the DER encoded certificate.\n    Multiple values can be specified (separated by spaces or commas). This can\n    be used to define both old and new fingerprints while a host transitions\n    to a new certificate.\n\n    The CA chain and web.cacerts is not used for servers with a fingerprint.\n\n    For example:\n\n      [hostfingerprints]\n      hg.intevation.de = fc:e2:8d:d9:51:cd:cb:c1:4d:18:6b:b7:44:8d:49:72:57:e6:cd:33\n      hg.intevation.org = fc:e2:8d:d9:51:cd:cb:c1:4d:18:6b:b7:44:8d:49:72:57:e6:cd:33\n\n    "hostsecurity"\n    --------------\n\n    Used to specify global and per-host security settings for connecting to\n    other machines.\n\n    The following options control default behavior for all hosts.\n\n    "ciphers"\n        Defines the cryptographic ciphers to use for connections.\n\n        Value must be a valid OpenSSL Cipher List Format as documented at\n        https://www.openssl.org/docs/manmaster/apps/ciphers.html#CIPHER-LIST-\n        FORMAT.\n\n        This setting is for advanced users only. Setting to incorrect values\n        can significantly lower connection security or decrease performance.\n        You have been warned.\n\n        This option requires Python 2.7.\n\n    "minimumprotocol"\n        Defines the minimum channel encryption protocol to use.\n\n        By default, the highest version of TLS supported by both client and\n        server is used.\n\n        Allowed values are: "tls1.0", "tls1.1", "tls1.2".\n\n        When running on an old Python version, only "tls1.0" is allowed since\n        old versions of Python only support up to TLS 1.0.\n\n        When running a Python that supports modern TLS versions, the default\n        is "tls1.1". "tls1.0" can still be used to allow TLS 1.0. However,\n        this weakens security and should only be used as a feature of last\n        resort if a server does not support TLS 1.1+.\n\n    Options in the "[hostsecurity]" section can have the form\n    "hostname":"setting". This allows multiple settings to be defined on a\n    per-host basis.\n\n    The following per-host settings can be defined.\n\n    "ciphers"\n        This behaves like "ciphers" as described above except it only applies\n        to the host on which it is defined.\n\n    "fingerprints"\n        A list of hashes of the DER encoded peer/remote certificate. Values\n        have the form "algorithm":"fingerprint". e.g. "sha256:c3ab8ff13720e8ad\n        9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2". In addition, colons\n        (":") can appear in the fingerprint part.\n\n        The following algorithms/prefixes are supported: "sha1", "sha256",\n        "sha512".\n\n        Use of "sha256" or "sha512" is preferred.\n\n        If a fingerprint is specified, the CA chain is not validated for this\n        host and Mercurial will require the remote certificate to match one of\n        the fingerprints specified. This means if the server updates its\n        certificate, Mercurial will abort until a new fingerprint is defined.\n        This can provide stronger security than traditional CA-based\n        validation at the expense of convenience.\n\n        This option takes precedence over "verifycertsfile".\n\n    "minimumprotocol"\n        This behaves like "minimumprotocol" as described above except it only\n        applies to the host on which it is defined.\n\n    "verifycertsfile"\n        Path to file a containing a list of PEM encoded certificates used to\n        verify the server certificate. Environment variables and "~user"\n        constructs are expanded in the filename.\n\n        The server certificate or the certificate\'s certificate authority (CA)\n        must match a certificate from this file or certificate verification\n        will fail and connections to the server will be refused.\n\n        If defined, only certificates provided by this file will be used:\n        "web.cacerts" and any system/default certificates will not be used.\n\n        This option has no effect if the per-host "fingerprints" option is\n        set.\n\n        The format of the file is as follows:\n\n          -----BEGIN CERTIFICATE-----\n          ... (certificate in base64 PEM encoding) ...\n          -----END CERTIFICATE-----\n          -----BEGIN CERTIFICATE-----\n          ... (certificate in base64 PEM encoding) ...\n          -----END CERTIFICATE-----\n\n    For example:\n\n      [hostsecurity]\n      hg.example.com:fingerprints = sha256:c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2\n      hg2.example.com:fingerprints = sha1:914f1aff87249c09b6859b88b1906d30756491ca, sha1:fc:e2:8d:d9:51:cd:cb:c1:4d:18:6b:b7:44:8d:49:72:57:e6:cd:33\n      hg3.example.com:fingerprints = sha256:9a:b0:dc:e2:75:ad:8a:b7:84:58:e5:1f:07:32:f1:87:e6:bd:24:22:af:b7:ce:8e:9c:b4:10:cf:b9:f4:0e:d2\n      foo.example.com:verifycertsfile = /etc/ssl/trusted-ca-certs.pem\n\n    To change the default minimum protocol version to TLS 1.2 but to allow TLS\n    1.1 when connecting to "hg.example.com":\n\n      [hostsecurity]\n      minimumprotocol = tls1.2\n      hg.example.com:minimumprotocol = tls1.1\n\n    "http_proxy"\n    ------------\n\n    Used to access web-based Mercurial repositories through a HTTP proxy.\n\n    "host"\n        Host name and (optional) port of the proxy server, for example\n        "myproxy:8000".\n\n    "no"\n        Optional. Comma-separated list of host names that should bypass the\n        proxy.\n\n    "passwd"\n        Optional. Password to authenticate with at the proxy server.\n\n    "user"\n        Optional. User name to authenticate with at the proxy server.\n\n    "always"\n        Optional. Always use the proxy, even for localhost and any entries in\n        "http_proxy.no". (default: False)\n\n    "log"\n    -----\n\n    "simplify-grandparents"\n       Controls whether grandparents of indeterminate commits get simplified\n       for graph log. If set to true, edges from an indeterminate X to its\n       (grand)parent Y will be hidden if X has another (grand)parent Z and Y\n       is a (grand)parent of Z.\n\n       For example:\n\n         E\n         |\n         D\n         |\\\n         B C\n         |/\n         A\n\n       When logging A, B, E with this config off, the result is:\n\n         E\n         :\\\n         : B\n         :/\n         A\n\n       When logging A, B, E with this config on, the result will be:\n\n         E\n         :\n         B\n         |\n         A\n\n       This feature requires a modern commit graph backend. It is turned off\n       if an older commit graph backend is used. (default: True)\n\n    "merge"\n    -------\n\n    This section specifies behavior during merges and updates.\n\n    "checkignored"\n       Controls behavior when an ignored file on disk has the same name as a\n       tracked file in the commit being merged or updated to, and has\n       different contents. Options are "abort", "warn" and "ignore". With\n       "abort", abort on such files. With "warn", warn on such files and back\n       them up as ".orig". With "ignore", don\'t print a warning and back them\n       up as ".orig". (default: "abort")\n\n    "checkunknown"\n       Controls behavior when an unknown file that isn\'t ignored has the same\n       name as a tracked file in the commit being merged or updated to, and\n       has different contents. Similar to "merge.checkignored", except for\n       files that are not ignored. (default: "abort")\n\n    "on-failure"\n       When set to "continue" (the default), the merge process attempts to\n       merge all unresolved files using the merge chosen tool, regardless of\n       whether previous file merge attempts during the process succeeded or\n       not. Setting this to "prompt" will prompt after any merge failure\n       continue or halt the merge process. Setting this to "halt" will\n       automatically halt the merge process on any merge tool failure. The\n       merge process can be restarted by using the "resolve" command. When a\n       merge is halted, the repository is left in a normal "unresolved" merge\n       state. (default: "continue")\n\n    "printcandidatecommmits"\n       If set to "true", calculate and print potentially conflicted commits\n       when there are merge conflicts. (default: "false")\n\n    "word-merge"\n      When enabled, attempt to run word-level 3-way merge resolution on\n      conflicted regions to reduce conflicts. This be helpful for some\n      conflicts caused by renaming or small refactoring. (default: "false")\n\n    "merge-patterns"\n    ----------------\n\n    This section specifies merge tools to associate with particular file\n    patterns. Tools matched here will take precedence over the default merge\n    tool. Patterns are globs by default, rooted at the repository root.\n\n    Example:\n\n      [merge-patterns]\n      **.c = kdiff3\n      **.jpg = myimgmerge\n\n    "merge-tools"\n    -------------\n\n    This section configures external merge tools to use for file-level merges.\n    This section has likely been preconfigured at install time. Use \'hg config\n    merge-tools\' to check the existing configuration. Also see \'hg help merge-\n    tools\' for more details.\n\n    Example "~/.hgrc":\n\n      [merge-tools]\n      # Override stock tool location\n      kdiff3.executable = ~/bin/kdiff3\n      # Specify command line\n      kdiff3.args = $base $local $other -o $output\n      # Give higher priority\n      kdiff3.priority = 1\n\n      # Changing the priority of preconfigured tool\n      meld.priority = 0\n\n      # Disable a preconfigured tool\n      vimdiff.disabled = yes\n\n      # Define new tool\n      myHtmlTool.args = -m $local $other $base $output\n      myHtmlTool.regkey = Software\\FooSoftware\\HtmlMerge\n      myHtmlTool.priority = 1\n\n    Supported arguments:\n\n    "priority"\n      The priority in which to evaluate this tool. (default: 0)\n\n    "executable"\n      Either just the name of the executable or its pathname.\n\n      (default: the tool name)\n\n    "args"\n      The arguments to pass to the tool executable. You can refer to the files\n      being merged as well as the output file through these variables:\n      "$base", "$local", "$other", "$output". The meaning of "$local" and\n      "$other" can vary depending on which action is being performed. During\n      and update or merge, "$local" represents the original state of the file,\n      while "$other" represents the commit you are updating to or the commit\n      you are merging with. During a rebase "$local" represents the\n      destination of the rebase, and "$other" represents the commit being\n      rebased. (default: "$local $base $other")\n\n    "premerge"\n      Attempt to run internal non-interactive 3-way merge tool before\n      launching external tool.  Options are "true", "false", "keep" or "keep-\n      merge3". The "keep" option will leave markers in the file if the\n      premerge fails. The "keep-merge3" will do the same but include\n      information about the base of the merge in the marker (see internal\n      :merge3 in \'hg help merge-tools\'). (default: True)\n\n    "binary"\n      This tool can merge binary files. (default: False, unless tool was\n      selected by file pattern match)\n\n    "symlink"\n      This tool can merge symlinks. (default: False)\n\n    "check"\n      A list of merge success-checking options:\n\n      "changed"\n        Ask whether merge was successful when the merged file shows no\n        changes.\n\n      "conflicts"\n        Check whether there are conflicts even though the tool reported\n        success.\n\n      "prompt"\n        Always prompt for merge success, regardless of success reported by\n        tool.\n\n    "fixeol"\n      Attempt to fix up EOL changes caused by the merge tool. (default: False)\n\n    "gui"\n      This tool requires a graphical interface to run. (default: False)\n\n    "mutation"\n    ----------\n\n    Controls recording of commit mutation metadata.\n\n    "enabled"\n        Set to true to enable the usage of commit mutation metadata in\n        preference to obsolescence markers.\n\n    "record"\n        Set to false to disable recording of commit mutation metadata in\n        commit extras. (default: True)\n\n    "date"\n        Override the date and time the commit was mutated at.  The default is\n        the current date and time.\n\n    "user"\n        Override the username of the user performing the mutation.  The\n        default is the current user.\n\n    "automigrate"\n        Set to true to automatically convert obsmarkers to mutation metadata\n        during automigration at the start of pull.\n\n    "pager"\n    -------\n\n    Setting used to control when to paginate and with what external tool. See\n    \'hg help pager\' for details.\n\n    "pager"\n        If specified as "internal:streampager" (the default), the builtin\n        streampager is used, which supports showing progress bars and stderr.\n\n        Otherwise, the config specifies the external tool used as pager.\n\n    "ignore"\n        List of commands to disable the pager for. Example:\n\n      [pager]\n      ignore = version, help, update\n\n    "stderr"\n        Whether to redirect error messages to the pager.\n\n        If set to false, Mercurial will continue to output error messages and\n        progress bars to stderr while the pager is running.  Depending on the\n        pager, this may overlay the pager display.\n\n        Has no effect if streampager is used.\n\n    "separate-stderr"\n        Whether to show stderr in a separate pane.\n\n        If set to false, stderr will be mixed into stdout output.\n\n        Only affects streampager. Default: false.\n\n    "encoding"\n        Encoding to use to output to ther pager.\n\n        If set, overrides the output encoding when sending output to the\n        pager.\n\n          [pager] encoding = utf-8\n\n        Has no effect if streampager is used.\n\n    "scroll-past-eof"\n        Whether to scroll past the end of the output. Default: false.\n\n        Only affects streampager.\n\n    "wrapping-mode"\n        Choose the line wrapping boundary: none, word, line.\n\n        - none: do not wrap lines\n        - word: wrap at word boundary\n        - line: wrap at any characters\n\n        Default: line\n\n        Only affects streampager.\n\n    "interface"\n        Choose the default interface: fullscreen, direct, hybrid,\n        delayed:2000ms.\n\n        - fullscreen: enter full screen interface immediately.\n        - direct: output directly to terminal without buffering.\n        - hybrid: direct for short output, fullscreen for large (>1 page)\n          output.\n        - delayed: buffer wait for the given time before outputting completed\n          short output directly to the terminal, or entering fullscreen mode\n          for longer output.\n\n        Default: hybrid\n\n        Only affects streampager.\n\n    "patch"\n    -------\n\n    Settings used when applying patches, for instance through the \'import\'\n    command or with Mercurial Queues extension.\n\n    "eol"\n        When set to \'strict\' patch content and patched files end of lines are\n        preserved. When set to "lf" or "crlf", both files end of lines are\n        ignored when patching and the result line endings are normalized to\n        either LF (Unix) or CRLF (Windows). When set to "auto", end of lines\n        are again ignored while patching but line endings in patched files are\n        normalized to their original setting on a per-file basis. If target\n        file does not exist or has no end of line, patch line endings are\n        preserved. (default: strict)\n\n    "fuzz"\n        The number of lines of \'fuzz\' to allow when applying patches. This\n        controls how much context the patcher is allowed to ignore when trying\n        to apply a patch. (default: 2)\n\n    "paths"\n    -------\n\n    Assigns symbolic names and behavior to repositories.\n\n    Options are symbolic names defining the URL or directory that is the\n    location of the repository. Example:\n\n      [paths]\n      my_server = https://example.com/my_repo\n      local_path = /home/me/repo\n\n    These symbolic names can be used from the command line. To pull from\n    "my_server": \'hg pull my_server\'. To push to "local_path": \'hg push\n    local_path\'.\n\n    Options containing colons (":") denote sub-options that can influence\n    behavior for that specific path. Example:\n\n      [paths]\n      my_server = https://example.com/my_path\n      my_server:pushurl = ssh://example.com/my_path\n\n    The following sub-options can be defined:\n\n    "pushurl"\n       The URL to use for push operations. If not defined, the location\n       defined by the path\'s main entry is used.\n\n    "pushrev"\n       A revset defining which revisions to push by default.\n\n       When \'hg push\' is executed without a "-r" argument, the revset defined\n       by this sub-option is evaluated to determine what to push.\n\n       For example, a value of "." will push the working directory\'s revision\n       by default.\n\n       Revsets specifying bookmarks will not result in the bookmark being\n       pushed.\n\n    The following special named paths exist:\n\n    "default"\n       The URL or directory to use when no source or remote is specified.\n\n       \'hg clone\' will automatically define this path to the location the\n       repository was cloned from.\n\n    "default-push"\n       (deprecated) The URL or directory for the default \'hg push\' location.\n       "default:pushurl" should be used instead.\n\n    "phases"\n    --------\n\n    Specifies default handling of phases. See \'hg help phases\' for more\n    information about working with phases.\n\n    "publish"\n        Controls draft phase behavior when working as a server. When true,\n        pushed commits are set to public in both client and server and pulled\n        or cloned commits are set to public in the client. (default: True)\n\n    "new-commit"\n        Phase of newly-created commits. (default: draft)\n\n    "profiling"\n    -----------\n\n    Specifies profiling type, format, and file output. Two profilers are\n    supported: an instrumenting profiler (named "ls"), and a sampling profiler\n    (named "stat").\n\n    In this section description, \'profiling data\' stands for the raw data\n    collected during profiling, while \'profiling report\' stands for a\n    statistical text report generated from the profiling data. The profiling\n    is done using lsprof.\n\n    If "profiling.enabled" is false, alternative sections can still enable\n    profiling. Sections starting with "profiling:" are examined in alphabet\n    order. The first one with "enabled" set to true will be used.\n\n    "enabled"\n        Enable the profiler. (default: false)\n\n        This is equivalent to passing "--profile" on the command line.\n\n    "type"\n        The type of profiler to use. (default: stat)\n\n        "ls"\n          Use Python\'s built-in instrumenting profiler. This profiler works on\n          all platforms, but each line number it reports is the first line of\n          a function. This restriction makes it difficult to identify the\n          expensive parts of a non-trivial function.\n\n        "stat"\n          Use a statistical profiler, statprof. This profiler is most useful\n          for profiling commands that run for longer than about 0.1 seconds.\n\n    "format"\n        Profiling format.  Specific to the "ls" instrumenting profiler.\n        (default: text)\n\n        "text"\n          Generate a profiling report. When saving to a file, it should be\n          noted that only the report is saved, and the profiling data is not\n          kept.\n\n        "kcachegrind"\n          Format profiling data for kcachegrind use: when saving to a file,\n          the generated file can directly be loaded into kcachegrind.\n\n    "statformat"\n        Profiling format for the "stat" profiler. (default: hotpath)\n\n        "hotpath"\n          Show a tree-based display containing the hot path of execution\n          (where most time was spent).\n\n        "bymethod"\n          Show a table of methods ordered by how frequently they are active.\n\n        "byline"\n          Show a table of lines in files ordered by how frequently they are\n          active.\n\n        "json"\n          Render profiling data as JSON.\n\n    "frequency"\n        Sampling frequency.  Specific to the "stat" sampling profiler.\n        (default: 1000)\n\n    "output"\n        File path where profiling data or report should be saved. If the file\n        exists, it is replaced. (default: None, data is printed on stderr)\n\n    "sort"\n        Sort field.  Specific to the "ls" instrumenting profiler. One of\n        "callcount", "reccallcount", "totaltime" and "inlinetime". (default:\n        inlinetime)\n\n    "limit"\n        Number of lines to show. Specific to the "ls" instrumenting profiler.\n        (default: 30)\n\n    "minelapsed"\n        Minimum seconds required to output the profiling result. (default: 0)\n\n    "nested"\n        Show at most this number of lines of drill-down info after each main\n        entry. This can help explain the difference between Total and Inline.\n        Specific to the "ls" instrumenting profiler. (default: 5)\n\n    "showmin"\n        Minimum fraction of samples an entry must have for it to be displayed.\n        Can be specified as a float between "0.0" and "1.0" or can have a "%"\n        afterwards to allow values up to "100". e.g. "5%".\n\n        Only used by the "stat" profiler.\n\n        For the "hotpath" format, default is "0.05". For the "chrome" format,\n        default is "0.005".\n\n        The option is unused on other formats.\n\n    "showmax"\n        Maximum fraction of samples an entry can have before it is ignored in\n        display. Values format is the same as "showmin".\n\n        Only used by the "stat" profiler.\n\n        For the "chrome" format, default is "0.999".\n\n        The option is unused on other formats.\n\n    "progress"\n    ----------\n\n    Mercurial commands can draw progress bars that are as informative as\n    possible. Some progress bars only offer indeterminate information, while\n    others have a definite end point.\n\n    "delay"\n        Number of seconds (float) before showing the progress bar. (default:\n        3)\n\n    "changedelay"\n        Minimum delay before showing a new topic. When set to less than 3 *\n        refresh, that value will be used instead. (default: 1)\n\n    "estimateinterval"\n        Maximum sampling interval in seconds for speed and estimated time\n        calculation. (default: 60)\n\n    "refresh"\n        Time in seconds between refreshes of the progress bar. (default: 0.1)\n\n    "format"\n        Format of the progress bar.\n\n        Valid entries for the format field are "topic", "bar", "number",\n        "unit", "estimate", "speed", and "item". "item" defaults to the last\n        20 characters of the item, but this can be changed by adding either\n        "-<num>" which would take the last num characters, or "+<num>" for the\n        first num characters.\n\n        (default: topic bar number estimate)\n\n    "width"\n        If set, the maximum width of the progress information (that is,\n        min(width, term width) will be used).\n\n    "clear-complete"\n        Clear the progress bar after it\'s done. (default: True)\n\n    "disable"\n        If true, don\'t show a progress bar.\n\n    "assume-tty"\n        If true, ALWAYS show a progress bar, unless disable is given.\n\n    "renderer"\n        The name of the renderer to use to render the progress bar.\n\n    "debug"\n        Enables debug mode for progress bars.  Progress output will be printed\n        line by line for each item that is processed.\n\n    "pull"\n    ------\n\n    "automigrate"\n        Perform potentially expensive automatic migration to new formats and\n        configurations at the start of pull commands. (default: True)\n\n    "rebase"\n    --------\n\n    "evolution.allowdivergence"\n        Default to False, when True allow creating divergence when performing\n        rebase of obsolete commits.\n\n    "revsetalias"\n    -------------\n\n    Alias definitions for revsets. See \'hg help revsets\' for details.\n\n    "server"\n    --------\n\n    Controls generic server settings.\n\n    "bookmarks-pushkey-compat"\n        Trigger pushkey hook when being pushed bookmark updates. This config\n        exist for compatibility purpose (default to True)\n\n        If you use "pushkey" and "pre-pushkey" hooks to control bookmark\n        movement we recommend you migrate them to "txnclose-bookmark" and\n        "pretxnclose-bookmark".\n\n    "compressionengines"\n        List of compression engines and their relative priority to advertise\n        to clients.\n\n        The order of compression engines determines their priority, the first\n        having the highest priority. If a compression engine is not listed\n        here, it won\'t be advertised to clients.\n\n        If not set (the default), built-in defaults are used. Run \'hg\n        debuginstall\' to list available compression engines and their default\n        wire protocol priority.\n\n        Older Mercurial clients only support zlib compression and this setting\n        has no effect for legacy clients.\n\n    "uncompressed"\n        Whether to allow clients to clone a repository using the uncompressed\n        streaming protocol. This transfers about 40% more data than a regular\n        clone, but uses less memory and CPU on both server and client. Over a\n        LAN (100 Mbps or better) or a very fast WAN, an uncompressed streaming\n        clone is a lot faster (~10x) than a regular clone. Over most WAN\n        connections (anything slower than about 6 Mbps), uncompressed\n        streaming is slower, because of the extra data transfer overhead. This\n        mode will also temporarily hold the write lock while determining what\n        data to transfer. (default: True)\n\n    "uncompressedallowsecret"\n        Whether to allow stream clones when the repository contains secret\n        commits. (default: False)\n\n    "preferuncompressed"\n        When set, clients will try to use the uncompressed streaming protocol.\n        (default: False)\n\n    "disablefullbundle"\n        When set, servers will refuse attempts to do pull-based clones. If\n        this option is set, "preferuncompressed" and/or clone bundles are\n        highly recommended. Partial clones will still be allowed. (default:\n        False)\n\n    "validate"\n        Whether to validate the completeness of pushed commits by checking\n        that all new file revisions specified in manifests are present.\n        (default: False)\n\n    "maxhttpheaderlen"\n        Instruct HTTP clients not to send request headers longer than this\n        many bytes. (default: 1024)\n\n    "bundle1"\n        Whether to allow clients to push and pull using the legacy bundle1\n        exchange format. (default: True)\n\n    "bundle1gd"\n        Like "bundle1" but only used if the repository is using the\n        *generaldelta* storage format. (default: True)\n\n    "bundle1.push"\n        Whether to allow clients to push using the legacy bundle1 exchange\n        format. (default: True)\n\n    "bundle1gd.push"\n        Like "bundle1.push" but only used if the repository is using the\n        *generaldelta* storage format. (default: True)\n\n    "bundle1.pull"\n        Whether to allow clients to pull using the legacy bundle1 exchange\n        format. (default: True)\n\n    "bundle1gd.pull"\n        Like "bundle1.pull" but only used if the repository is using the\n        *generaldelta* storage format. (default: True)\n\n        Large repositories using the *generaldelta* storage format should\n        consider setting this option because converting *generaldelta*\n        repositories to the exchange format required by the bundle1 data\n        format can consume a lot of CPU.\n\n    "zliblevel"\n        Integer between "-1" and "9" that controls the zlib compression level\n        for wire protocol commands that send zlib compressed output (notably\n        the commands that send repository history data).\n\n        The default ("-1") uses the default zlib compression level, which is\n        likely equivalent to "6". "0" means no compression. "9" means maximum\n        compression.\n\n        Setting this option allows server operators to make trade-offs between\n        bandwidth and CPU used. Lowering the compression lowers CPU\n        utilization but sends more bytes to clients.\n\n        This option only impacts the HTTP server.\n\n    "zstdlevel"\n        Integer between "1" and "22" that controls the zstd compression level\n        for wire protocol commands. "1" is the minimal amount of compression\n        and "22" is the highest amount of compression.\n\n        The default ("3") should be significantly faster than zlib while\n        likely delivering better compression ratios.\n\n        This option only impacts the HTTP server.\n\n        See also "server.zliblevel".\n\n    "smtp"\n    ------\n\n    Configuration for extensions that need to send email messages.\n\n    "host"\n        Host name of mail server, e.g. "mail.example.com".\n\n    "port"\n        Optional. Port to connect to on mail server. (default: 465 if "tls" is\n        smtps; 25 otherwise)\n\n    "tls"\n        Optional. Method to enable TLS when connecting to mail server:\n        starttls, smtps or none. (default: none)\n\n    "username"\n        Optional. User name for authenticating with the SMTP server. (default:\n        None)\n\n    "password"\n        Optional. Password for authenticating with the SMTP server. If not\n        specified, interactive sessions will prompt the user for a password;\n        non-interactive sessions will fail. (default: None)\n\n    "local_hostname"\n        Optional. The hostname that the sender can use to identify itself to\n        the MTA.\n\n    "templatealias"\n    ---------------\n\n    Alias definitions for templates. See \'hg help templates\' for details.\n\n    "templates"\n    -----------\n\n    Use the "[templates]" section to define template strings. See \'hg help\n    templates\' for details.\n\n    "tracing"\n    ---------\n\n    "stderr"\n        Whether to print the trace to stderr if it meets the\n        "tracing.threshold" cutoff. (default: false).\n\n    "threshold"\n        Integer. Minimum duration, in seconds, a command must run in order for\n        the trace to be logged (usually to the blackbox). (default: 10)\n\n    "treestate"\n    -----------\n\n    "mingcage"\n        Seconds. Only files older than that would be garbage collected.\n        (default: 1209600, 2 weeks)\n\n    "minrepackthreshold"\n        Bytes. Minimal size to trigger a repack. (default: 10M)\n\n    "repackfactor"\n        Integer. Number of times treestate can grow without being repacked.\n        Set to 0 to disable automatic repack. (default: 3)\n\n    "ui"\n    ----\n\n    User interface controls.\n\n    "archivemeta"\n        Whether to include the .hg_archival.txt file containing meta data\n        (hashes for the repository base and for tip) in archives created by\n        the \'hg archive\' command or downloaded via hgweb. (default: True)\n\n    "askusername"\n        Whether to prompt for a username when committing. If True, and neither\n        "$HGUSER" nor "$EMAIL" has been specified, then the user will be\n        prompted to enter a username. If no username is entered, the default\n        "USER@HOST" is used instead. (default: False)\n\n    "clonebundles"\n        Whether the "clone bundles" feature is enabled.\n\n        When enabled, \'hg clone\' may download and apply a server-advertised\n        bundle file from a URL instead of using the normal exchange mechanism.\n\n        This can likely result in faster and more reliable clones.\n\n        (default: True)\n\n    "clonebundlefallback"\n        Whether failure to apply an advertised "clone bundle" from a server\n        should result in fallback to a regular clone.\n\n        This is disabled by default because servers advertising "clone\n        bundles" often do so to reduce server load. If advertised bundles\n        start mass failing and clients automatically fall back to a regular\n        clone, this would add significant and unexpected load to the server\n        since the server is expecting clone operations to be offloaded to pre-\n        generated bundles. Failing fast (the default behavior) ensures clients\n        don\'t overwhelm the server when "clone bundle" application fails.\n\n        (default: False)\n\n    "clonebundleprefers"\n        Defines preferences for which "clone bundles" to use.\n\n        Servers advertising "clone bundles" may advertise multiple available\n        bundles. Each bundle may have different attributes, such as the bundle\n        type and compression format. This option is used to prefer a\n        particular bundle over another.\n\n        The following keys are defined by Mercurial:\n\n        BUNDLESPEC\n           A bundle type specifier. These are strings passed to \'hg bundle\n           -t\'. e.g. "gzip-v2" or "bzip2-v1".\n\n        COMPRESSION\n           The compression format of the bundle. e.g. "gzip" and "bzip2".\n\n        Server operators may define custom keys.\n\n        Example values: "COMPRESSION=bzip2", "BUNDLESPEC=gzip-v2,\n        COMPRESSION=gzip".\n\n        By default, the first bundle advertised by the server is used.\n\n    "color"\n        When to colorize output. Possible value are Boolean ("yes" or "no"),\n        or "debug", or "always". (default: "yes"). "yes" will use color\n        whenever it seems possible. See \'hg help color\' for details.\n\n    "debug"\n        Print debugging information. (default: False)\n\n    "editor"\n        The editor to use during a commit. (default: "$EDITOR" or "vi")\n\n    "enableincomingoutgoing"\n        Enable the commands "incoming" and "outgoing". (default: True)\n\n    "exitcodemask"\n        Bitwise-and mask for the exit code of a normal command. Useful for\n        easier scripting. For example, set it to 254 to normalize exit code 1\n        (no changes) to 0 (success), or set it to 63 to avoid conflicts with\n        other software (ex. "ssh") returning 255. The config is effective if\n        set via command line. If "HGPLAIN" is set, but "HGPLAINEXCEPT" does\n        not contain "exitcode", the config is ineffective if set in config\n        files. (default: 255)\n\n    "fallbackencoding"\n        Encoding to try if it\'s not possible to decode the changelog using\n        UTF-8. (default: ISO-8859-1)\n\n    "fancy-traceback"\n        Render local variables in traceback. (default: True)\n\n    "gitignore"\n        Respect ".gitignore" in every directory. (default: False)\n\n    "graphnodetemplate"\n        The template used to print commit nodes in an ASCII revision graph.\n        (default: "{graphnode}")\n\n    "hgignore"\n        The hgignore feature is being deprecated. Use .gitignore instead.\n        Respect ".hgignore" at the root of a repo. (default: False)\n\n    "ignore"\n        A file to read per-user ignore patterns from. This file should be in\n        the same format as a repository-wide .gitignore file. Filenames are\n        relative to the repository root. This option supports hook syntax, so\n        if you want to specify multiple ignore files, you can do so by setting\n        something like "ignore.other = ~/.gitignore2".\n\n        For details of the ignore file format, see the "gitignore(5)" man\n        page.\n\n    "interactive"\n        Allow to prompt the user. (default: True)\n\n    "interface"\n        Select the default interface for interactive features (default: text).\n        Possible values are \'text\' and \'curses\'.\n\n    "interface.chunkselector"\n        Select the interface for change recording (e.g. \'hg commit -i\').\n        Possible values are \'text\' and \'curses\'. This config overrides the\n        interface specified by ui.interface.\n\n    "logtemplate"\n        Template string for commands that print commits.\n\n    "merge"\n        The conflict resolution program to use during a manual merge. For more\n        information on merge tools see \'hg help merge-tools\'. For configuring\n        merge tools see the "[merge-tools]" section.\n\n    "merge:interactive"\n        If set, override "ui.merge" in interactive mode (usually when both\n        stdin and stdout are ttys).\n\n    "mergemarkers"\n        Sets the merge conflict marker label styling. The "detailed" style\n        uses the "mergemarkertemplate" setting to style the labels. The\n        "basic" style just uses \'local\' and \'other\' as the marker label. One\n        of "basic" or "detailed". (default: "basic")\n\n    "mergemarkertemplate"\n        The template used to print the commit description next to each\n        conflict marker during merge conflicts. See \'hg help templates\' for\n        the template format.\n\n        Defaults to showing the hash, tags, branches, bookmarks, author, and\n        the first line of the commit description.\n\n        If you use non-ASCII characters in names for tags, branches,\n        bookmarks, authors, and/or commit descriptions, you must pay attention\n        to encodings of managed files. At template expansion, non-ASCII\n        characters use the encoding specified by the "--encoding" global\n        option, "HGENCODING" or other environment variables that govern your\n        locale. If the encoding of the merge markers is different from the\n        encoding of the merged files, serious problems may occur.\n\n    "origbackuppath"\n        The path to a directory used to store generated .orig files. If the\n        path is not a directory, one will be created.  If set, files stored in\n        this directory have the same name as the original file and do not have\n        a .orig suffix.\n\n    "paginate"\n      Control the pagination of command output (default: True). See \'hg help\n      pager\' for details.\n\n    "patch"\n        An optional external tool that "hg import" and some extensions will\n        use for applying patches. By default Mercurial uses an internal patch\n        utility. The external tool must work as the common Unix "patch"\n        program. In particular, it must accept a "-p" argument to strip patch\n        headers, a "-d" argument to specify the current directory, a file name\n        to patch, and a patch file to take from stdin.\n\n        It is possible to specify a patch tool together with extra arguments.\n        For example, setting this option to "patch --merge" will use the\n        "patch" program with its 2-way merge option.\n\n    "portablefilenames"\n        Check for portable filenames. Can be "warn", "ignore" or "abort".\n        (default: "warn")\n\n        "warn"\n          Print a warning message on POSIX platforms, if a file with a non-\n          portable filename is added (e.g. a file with a name that can\'t be\n          created on Windows because it contains reserved parts like "AUX",\n          reserved characters like ":", or would cause a case collision with\n          an existing file).\n\n        "ignore"\n          Don\'t print a warning.\n\n        "abort"\n          The command is aborted.\n\n        "true"\n          Alias for "warn".\n\n        "false"\n          Alias for "ignore".\n\n    "quiet"\n        Reduce the amount of output printed. (default: False)\n\n    "remotecmd"\n        Remote command to use for clone/push/pull operations. (default: "hg")\n\n    "skip-local-bookmarks-on-pull"\n        Do not write local bookmarks on pull or clone. Turn on the\n        "remotenames" extension to get remote bookmarks.\n\n    "slash"\n        (Deprecated. Use "slashpath" template filter instead.)\n\n        Display paths using a slash ("/") as the path separator. This only\n        makes a difference on systems where the default path separator is not\n        the slash character (e.g. Windows uses the backslash character ("\\")).\n        (default: False)\n\n    "statuscopies"\n        Display copies in the status command.\n\n    "ssh"\n        Command to use for SSH connections. (default: "ssh")\n\n    "ssherrorhint"\n        A hint shown to the user in the case of SSH error (e.g. "Please see\n        http://company/internalwiki/ssh.html")\n\n    "strict"\n        Require exact command names, instead of allowing unambiguous\n        abbreviations. (default: False)\n\n    "style"\n        Name of style to use for command output.\n\n    "supportcontact"\n        A URL where users should report a Mercurial traceback. Use this if you\n        are a large organisation with its own Mercurial deployment process and\n        crash reports should be addressed to your internal support.\n\n    "textwidth"\n        Maximum width of help text. A longer line generated by "hg help" or\n        "hg subcommand --help" will be broken after white space to get this\n        width or the terminal width, whichever comes first. A non-positive\n        value will disable this and the terminal width will be used. (default:\n        78)\n\n    "timeout"\n        The timeout used when a lock is held (in seconds), a negative value\n        means no timeout. (default: 600)\n\n    "timeout.warn"\n        Time (in seconds) before a warning is printed about held lock. A\n        negative value means no warning. (default: 0)\n\n    "traceback"\n        Mercurial always prints a traceback when an unknown exception occurs.\n        Setting this to True will make Mercurial print a traceback on all\n        exceptions, even those recognized by Mercurial (such as IOError or\n        MemoryError). (default: False)\n\n    "tweakdefaults"\n\n        By default Mercurial\'s behavior changes very little from release to\n        release, but over time the recommended config settings shift. Enable\n        this config to opt in to get automatic tweaks to Mercurial\'s behavior\n        over time. This config setting will have no effet if "HGPLAIN\' is set\n        or "HGPLAINEXCEPT" is set and does not include "tweakdefaults".\n        (default: False)\n\n    "username"\n        The committer of a commit created when running "commit". Typically a\n        person\'s name and email address, e.g. "Fred Widget\n        <fred@example.com>". Environment variables in the username are\n        expanded.\n\n        (default: "$EMAIL" or "username@hostname". If the username in hgrc is\n        empty, e.g. if the system admin set "username =" in the system hgrc,\n        it has to be specified manually or in a different hgrc file)\n\n    "verbose"\n        Increase the amount of output printed. (default: False)\n\n    "visibility"\n    ------------\n\n    Controls how Mercurial determines commit visibility.  Mercurial can\n    optionally track which commits are visible explicitly, or it can determine\n    them implicitly from obsolescence markers.\n\n    "enabled"\n        Set to true to use explicit tracking of commit visibility if the\n        "visibleheads" requirement is set in the repo.  If False, or if the\n        "visibleheads" requirement is not set in the repo, then obsolescence\n        markers will be used to determine visibility.\n\n    "web"\n    -----\n\n    Web interface configuration. The settings in this section apply to both\n    the builtin webserver (started by \'hg serve\') and the script you run\n    through a webserver ("hgweb.cgi" and the derivatives for FastCGI and\n    WSGI).\n\n    The Mercurial webserver does no authentication (it does not prompt for\n    usernames and passwords to validate *who* users are), but it does do\n    authorization (it grants or denies access for *authenticated users* based\n    on settings in this section). You must either configure your webserver to\n    do authentication for you, or disable the authorization checks.\n\n    For a quick setup in a trusted environment, e.g., a private LAN, where you\n    want it to accept pushes from anybody, you can use the following command\n    line:\n\n      $ hg --config web.allow-push=* --config web.push_ssl=False serve\n\n    Note that this will allow anybody to push anything to the server and that\n    this should not be used for public servers.\n\n    The full set of options is:\n\n    "accesslog"\n        Where to output the access log. (default: stdout)\n\n    "address"\n        Interface address to bind to. (default: all)\n\n    "allow_archive"\n        List of archive format (bz2, gz, zip) allowed for downloading.\n        (default: empty)\n\n    "allowbz2"\n        (DEPRECATED) Whether to allow .tar.bz2 downloading of repository\n        revisions. (default: False)\n\n    "allowgz"\n        (DEPRECATED) Whether to allow .tar.gz downloading of repository\n        revisions. (default: False)\n\n    "allow-pull"\n        Whether to allow pulling from the repository. (default: True)\n\n    "allow-push"\n        Whether to allow pushing to the repository. If empty or not set,\n        pushing is not allowed. If the special value "*", any remote user can\n        push, including unauthenticated users. Otherwise, the remote user must\n        have been authenticated, and the authenticated user name must be\n        present in this list. The contents of the allow-push list are examined\n        after the deny_push list.\n\n    "allow_read"\n        If the user has not already been denied repository access due to the\n        contents of deny_read, this list determines whether to grant\n        repository access to the user. If this list is not empty, and the user\n        is unauthenticated or not present in the list, then access is denied\n        for the user. If the list is empty or not set, then access is\n        permitted to all users by default. Setting allow_read to the special\n        value "*" is equivalent to it not being set (i.e. access is permitted\n        to all users). The contents of the allow_read list are examined after\n        the deny_read list.\n\n    "allowzip"\n        (DEPRECATED) Whether to allow .zip downloading of repository\n        revisions. This feature creates temporary files. (default: False)\n\n    "baseurl"\n        Base URL to use when publishing URLs in other locations, so third-\n        party tools like email notification hooks can construct URLs. Example:\n        "http://hgserver/repos/".\n\n    "cacerts"\n        Path to file containing a list of PEM encoded certificate authority\n        certificates. Environment variables and "~user" constructs are\n        expanded in the filename. If specified on the client, then it will\n        verify the identity of remote HTTPS servers with these certificates.\n\n        To disable SSL verification temporarily, specify "--insecure" from\n        command line.\n\n        You can use OpenSSL\'s CA certificate file if your platform has one. On\n        most Linux systems this will be "/etc/ssl/certs/ca-certificates.crt".\n        Otherwise you will have to generate this file manually. The form must\n        be as follows:\n\n          -----BEGIN CERTIFICATE-----\n          ... (certificate in base64 PEM encoding) ...\n          -----END CERTIFICATE-----\n          -----BEGIN CERTIFICATE-----\n          ... (certificate in base64 PEM encoding) ...\n          -----END CERTIFICATE-----\n\n    "cache"\n        Whether to support caching in hgweb. (default: True)\n\n    "certificate"\n        Certificate to use when running \'hg serve\'.\n\n    "collapse"\n        With "descend" enabled, repositories in subdirectories are shown at a\n        single level alongside repositories in the current path. With\n        "collapse" also enabled, repositories residing at a deeper level than\n        the current path are grouped behind navigable directory entries that\n        lead to the locations of these repositories. In effect, this setting\n        collapses each collection of repositories found within a subdirectory\n        into a single entry for that subdirectory. (default: False)\n\n    "comparisoncontext"\n        Number of lines of context to show in side-by-side file comparison. If\n        negative or the value "full", whole files are shown. (default: 5)\n\n        This setting can be overridden by a "context" request parameter to the\n        "comparison" command, taking the same values.\n\n    "contact"\n        Name or email address of the person in charge of the repository.\n        (default: ui.username or "$EMAIL" or "unknown" if unset or empty)\n\n    "csp"\n        Send a "Content-Security-Policy" HTTP header with this value.\n\n        The value may contain a special string "%nonce%", which will be\n        replaced by a randomly-generated one-time use value. If the value\n        contains "%nonce%", "web.cache" will be disabled, as caching\n        undermines the one-time property of the nonce. This nonce will also be\n        inserted into "<script>" elements containing inline JavaScript.\n\n        Note: lots of HTML content sent by the server is derived from\n        repository data. Please consider the potential for malicious\n        repository data to "inject" itself into generated HTML content as part\n        of your security threat model.\n\n    "deny_push"\n        Whether to deny pushing to the repository. If empty or not set, push\n        is not denied. If the special value "*", all remote users are denied\n        push. Otherwise, unauthenticated users are all denied, and any\n        authenticated user name present in this list is also denied. The\n        contents of the deny_push list are examined before the allow-push\n        list.\n\n    "deny_read"\n        Whether to deny reading/viewing of the repository. If this list is not\n        empty, unauthenticated users are all denied, and any authenticated\n        user name present in this list is also denied access to the\n        repository. If set to the special value "*", all remote users are\n        denied access (rarely needed ;). If deny_read is empty or not set, the\n        determination of repository access depends on the presence and content\n        of the allow_read list (see description). If both deny_read and\n        allow_read are empty or not set, then access is permitted to all users\n        by default. If the repository is being served via hgwebdir, denied\n        users will not be able to see it in the list of repositories. The\n        contents of the deny_read list have priority over (are examined\n        before) the contents of the allow_read list.\n\n    "descend"\n        hgwebdir indexes will not descend into subdirectories. Only\n        repositories directly in the current path will be shown (other\n        repositories are still available from the index corresponding to their\n        containing path).\n\n    "description"\n        Textual description of the repository\'s purpose or contents. (default:\n        "unknown")\n\n    "encoding"\n        Character encoding name. (default: the current locale charset)\n        Example: "UTF-8".\n\n    "errorlog"\n        Where to output the error log. (default: stderr)\n\n    "guessmime"\n        Control MIME types for raw download of file content. Set to True to\n        let hgweb guess the content type from the file extension. This will\n        serve HTML files as "text/html" and might allow cross-site scripting\n        attacks when serving untrusted repositories. (default: False)\n\n    "hidden"\n        Whether to hide the repository in the hgwebdir index. (default: False)\n\n    "ipv6"\n        Whether to use IPv6. (default: False)\n\n    "labels"\n        List of string *labels* associated with the repository.\n\n        Labels are exposed as a template keyword and can be used to customize\n        output. e.g. the "index" template can group or filter repositories by\n        labels and the "summary" template can display additional content if a\n        specific label is present.\n\n    "logoimg"\n        File name of the logo image that some templates display on each page.\n        The file name is relative to "staticurl". That is, the full path to\n        the logo image is "staticurl/logoimg". If unset, "hglogo.png" will be\n        used.\n\n    "logourl"\n        Base URL to use for logos. If unset, "https://mercurial-scm.org/" will\n        be used.\n\n    "maxchanges"\n        Maximum number of changes to list on the changelog. (default: 10)\n\n    "maxfiles"\n        Maximum number of files to list per commit. (default: 10)\n\n    "maxshortchanges"\n        Maximum number of changes to list on the shortlog, graph or filelog\n        pages. (default: 60)\n\n    "name"\n        Repository name to use in the web interface. (default: current working\n        directory)\n\n    "port"\n        Port to listen on. (default: 8000)\n\n    "prefix"\n        Prefix path to serve from. (default: \'\' (server root))\n\n    "push_ssl"\n        Whether to require that inbound pushes be transported over SSL to\n        prevent password sniffing. (default: True)\n\n    "refreshinterval"\n        How frequently directory listings re-scan the filesystem for new\n        repositories, in seconds. This is relevant when wildcards are used to\n        define paths. Depending on how much filesystem traversal is required,\n        refreshing may negatively impact performance.\n\n        Values less than or equal to 0 always refresh. (default: 20)\n\n    "staticurl"\n        Base URL to use for static files. If unset, static files (e.g. the\n        hgicon.png favicon) will be served by the CGI script itself. Use this\n        setting to serve them directly with the HTTP server. Example:\n        "http://hgserver/static/".\n\n    "stripes"\n        How many lines a "zebra stripe" should span in multi-line output. Set\n        to 0 to disable. (default: 1)\n\n    "style"\n        Which template map style to use. The available options are the names\n        of subdirectories in the HTML templates path. (default: "paper")\n        Example: "monoblue".\n\n    "templates"\n        Where to find the HTML templates. The default path to the HTML\n        templates can be obtained from "hg debuginstall".\n\n    "websub"\n    --------\n\n    Web substitution filter definition. You can use this section to define a\n    set of regular expression substitution patterns which let you\n    automatically modify the hgweb server output.\n\n    The default hgweb templates only apply these substitution patterns on the\n    revision description fields. You can apply them anywhere you want when you\n    create your own templates by adding calls to the "websub" filter (usually\n    after calling the "escape" filter).\n\n    This can be used, for example, to convert issue references to links to\n    your issue tracker, or to convert "markdown-like" syntax into HTML (see\n    the examples below).\n\n    Each entry in this section names a substitution filter. The value of each\n    entry defines the substitution expression itself. The websub expressions\n    follow the old interhg extension syntax, which in turn imitates the Unix\n    sed replacement syntax:\n\n      patternname = s/SEARCH_REGEX/REPLACE_EXPRESSION/[i]\n\n    You can use any separator other than "/". The final "i" is optional and\n    indicates that the search must be case insensitive.\n\n    Examples:\n\n      [websub]\n      issues = s|issue(\\d+)|<a href="http://bts.example.org/issue\\1">issue\\1</a>|i\n      italic = s/\\b_(\\S+)_\\b/<i>\\1<\\/i>/\n      bold = s/\\*\\b(\\S+)\\b\\*/<b>\\1<\\/b>/\n\n    "wireproto"\n    -----------\n\n    "logrequests"\n        A list of wireproto requests to log. "sampling.py" extension can be\n        used to send list of log entries to log aggregator.\n\n    "loggetfiles"\n        Whether to log wireproto getfiles requests or not. "sampling.py"\n        extension can be used to send list of log entries to log aggregator.\n\n    "loggetpack"\n        Whether to log wireproto getpack requests or not. "sampling.py"\n        extension can be used to send list of log entries to log aggregator.\n\n    Examples:\n\n      [wireproto]\n      logrequests = getbundle,gettreepack\n      loggetfiles = True\n      loggetpack = True\n\n      [sampling]\n      key.wireproto_requests=perfpipe_wireprotorequests\n\n    "worker"\n    --------\n\n    Parallel master/worker configuration. We currently perform working\n    directory updates in parallel on Unix-like systems, which greatly helps\n    performance.\n\n    "enabled"\n        Whether to enable workers code to be used. (default: true)\n\n    "numcpus"\n        Number of CPUs to use for parallel operations. A zero or negative\n        value is treated as "use the default". (default: 4 or the number of\n        CPUs on the system, whichever is larger)\n\n    "backgroundclose"\n        Whether to enable closing file handles on background threads during\n        certain operations. Some platforms aren\'t very efficient at closing\n        file handles that have been written or appended to. By performing file\n        closing on background threads, file write rate can increase\n        substantially. (default: true on Windows, false elsewhere)\n\n    "backgroundcloseminfilecount"\n        Minimum number of files required to trigger background file closing.\n        Operations not writing this many files won\'t start background close\n        threads. (default: 2048)\n\n    "backgroundclosemaxqueue"\n        The maximum number of opened file handles waiting to be closed in the\n        background. This option only has an effect if "backgroundclose" is\n        enabled. (default: 384)\n\n    "backgroundclosethreadcount"\n        Number of threads to process background file closes. Only relevant if\n        "backgroundclose" is enabled. (default: 4)\n\nuse \'hg help -c config\' to see help for the config command\n')))}d.isMDXComponent=!0}}]);