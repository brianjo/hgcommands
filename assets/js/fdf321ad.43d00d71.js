"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1836],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>p});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),m=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=m(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=m(n),p=r,f=u["".concat(s,".").concat(p)]||u[p]||d[p]||a;return n?o.createElement(f,i(i({ref:t},l),{},{components:n})):o.createElement(f,i({ref:t},l))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var m=2;m<a;m++)i[m]=n[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8021:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>m});var o=n(7462),r=(n(7294),n(3905));const a={},i=void 0,c={unversionedId:"Commands/commit",id:"Commands/commit",title:"commit",description:"",source:"@site/docs/Commands/commit.md",sourceDirName:"Commands",slug:"/Commands/commit",permalink:"/docs/Commands/commit",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/commit.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"cloud",permalink:"/docs/Commands/cloud"},next:{title:"config",permalink:"/docs/Commands/config"}},s={},m=[],l={toc:m};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"hg commit \\[OPTION\\]... \\[FILE\\]...\n\naliases: ci, com\n\nsave all pending changes or specified files in a new commit\n\n    Commit changes to the given files to your local repository.\n\n    By default, all pending changes (in other words, those reported by 'hg\n    status') are committed. If you want to commit only some of your changes,\n    choose one of the following options:\n\n    - Specify an exact list of files for which you want changes committed.\n    - Use the -I or -X flags to pattern match file names to exclude or include\n      by using a fileset. See 'hg help filesets' for more information.\n    - Specify the --interactive flag to open a UI that will enable you to\n      select individual insertions or deletions.\n\n    If you are committing the result of a merge, such as when merge conflicts\n    occur during 'hg checkout', commit all pending changes. Do not specify\n    files or use -I, -X, or -i.\n\n    Specify the -m flag to include a free-form commit message. If you do not\n    specify -m, Mercurial opens your configured editor where you can enter a\n    message based on a pre-loaded commit template.\n\n    Returns 0 on success, 1 if nothing changed.\n\nOptions (\\[+\\] can be repeated):\n\n-A --addremove mark new/missing files as added/removed before committing\n--amend amend the parent of the working directory -e --edit invoke\neditor on commit messages -i --interactive use interactive mode -M\n--reuse-message REV reuse commit message from REV -I --include PATTERN\n\\[+\\] include names matching the given patterns -X --exclude PATTERN\n\\[+\\] exclude names matching the given patterns -m --message TEXT use\ntext as commit message -l --logfile FILE read commit message from file\n-d --date DATE record the specified date as commit date -u --user USER\nrecord the specified user as committer --rebase (with --amend) rebases\nchildren after the amend -T --template VALUE (with --amend) display with\ntemplate --no-automv disable automatic file move detection\n--no-move-detection disable automatic file move detection\n\n(some details hidden, use --verbose to show complete help)\n")))}d.isMDXComponent=!0}}]);