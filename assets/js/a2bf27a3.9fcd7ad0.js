"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9802],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7753:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={},i=void 0,s={unversionedId:"Commands/clone",id:"Commands/clone",title:"clone",description:"",source:"@site/docs/Commands/clone.md",sourceDirName:"Commands",slug:"/Commands/clone",permalink:"/docs/Commands/clone",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/clone.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"chistedit",permalink:"/docs/Commands/chistedit"},next:{title:"cloud",permalink:"/docs/Commands/cloud"}},c={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'hg clone \\[OPTION\\]... SOURCE \\[DEST\\]\n\nmake a copy of an existing repository\n\n    Create a copy of an existing repository in a new directory.\n\n    If no destination directory name is specified, it defaults to the basename\n    of the source.\n\n    The location of the source is added to the new repository\'s ".hg/hgrc"\n    file, as the default to be used for future pulls.\n\n    Only local paths and "ssh://" URLs are supported as destinations. For\n    "ssh://" destinations, no working directory or ".hg/hgrc" will be created\n    on the remote side.\n\n    If the source repository has a bookmark called \'@\' set, that revision will\n    be checked out in the new repository by default.\n\n    To check out a particular version, use -u/--update, or -U/--noupdate to\n    create a clone with no working directory.\n\n    To pull only a subset of commits, specify one or more revisions\n    identifiers with -r/--rev. The resulting clone will contain only the\n    specified commits and their ancestors. These options (or \'clone src#rev\n    dest\') imply --pull, even for local source repositories.\n\n    In normal clone mode, the remote normalizes repository data into a common\n    exchange format and the receiving end translates this data into its local\n    storage format. --stream activates a different clone mode that essentially\n    copies repository files from the remote with minimal data processing. This\n    significantly reduces the CPU cost of a clone both remotely and locally.\n    However, it often increases the transferred data size by 30-40%. This can\n    result in substantially faster clones where I/O throughput is plentiful,\n    especially for larger repositories. A side-effect of --stream clones is\n    that storage settings and requirements on the remote are applied locally:\n    a modern client may inherit legacy or inefficient storage used by the\n    remote or a legacy Mercurial client may not be able to clone from a modern\n    Mercurial remote.\n\n    See \'hg help urls\' for details on specifying URLs.\n\n    Returns 0 on success.\n\nOptions (\\[+\\] can be repeated):\n\n-U --noupdate clone an empty working directory -u --updaterev REV\nrevision or branch to check out --pull use pull protocol to copy\nmetadata --stream clone with minimal data processing --enable-profile\nVALUE \\[+\\] enable a sparse profile\n\n(some details hidden, use --verbose to show complete help)\n')))}u.isMDXComponent=!0}}]);