"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3557],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5665:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={},i=void 0,s={unversionedId:"Commands/grep",id:"Commands/grep",title:"grep",description:"",source:"@site/docs/Commands/grep.md",sourceDirName:"Commands",slug:"/Commands/grep",permalink:"/docs/Commands/grep",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/grep.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"graft",permalink:"/docs/Commands/graft"},next:{title:"heads",permalink:"/docs/Commands/heads"}},c={},p=[],l={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"hg grep \\[OPTION\\]... PATTERN \\[FILE\\]...\n\naliases: gre\n\nsearch for a pattern in tracked files in the working directory\n\n    The default regexp style is POSIX basic regexps. If no FILE parameters are\n    passed in, the current directory and its subdirectories will be searched.\n\n    For the old 'hg grep', which searches through history, see 'histgrep'.\n\nOptions (\\[+\\] can be repeated):\n\n-A --after-context NUM print NUM lines of trailing context -B\n--before-context NUM print NUM lines of leading context -C --context NUM\nprint NUM lines of output context -i --ignore-case ignore case when\nmatching -l --files-with-matches print only filenames that match -n\n--line-number print matching line numbers -V --invert-match select\nnon-matching lines -w --word-regexp match whole words only -E\n--extended-regexp use POSIX extended regexps -F --fixed-strings\ninterpret pattern as fixed string -P --perl-regexp use Perl-compatible\nregexps -I --include PATTERN \\[+\\] include names matching the given\npatterns -X --exclude PATTERN \\[+\\] exclude names matching the given\npatterns\n\n(some details hidden, use --verbose to show complete help)\n")))}u.isMDXComponent=!0}}]);