"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[821],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=r.createContext({}),c=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(m.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=o,f=p["".concat(m,".").concat(u)]||p[u]||l[u]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8528:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={},i=void 0,s={unversionedId:"Commands/metaedit",id:"Commands/metaedit",title:"metaedit",description:"",source:"@site/docs/Commands/metaedit.md",sourceDirName:"Commands",slug:"/Commands/metaedit",permalink:"/docs/Commands/metaedit",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/metaedit.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"merge",permalink:"/docs/Commands/merge"},next:{title:"next",permalink:"/docs/Commands/next"}},m={},c=[],d={toc:c};function l(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'alias for: metaedit --batch\n\nhg metaedit \\[OPTION\\]... \\[-r\\] \\[REV\\]\n\naliases: met\n\nedit commit message and other metadata\n\n    Edit commit message for the current commit. By default, opens your default\n    editor so that you can edit the commit message interactively. Specify -m\n    to specify the commit message on the command line.\n\n    To edit the message for a different commit, specify -r. To edit the\n    messages of multiple commits, specify --batch.\n\n    You can edit other pieces of commit metadata, namely the user or date, by\n    specifying -u or -d, respectively. The expected format for user is \'Full\n    Name <user@example.com>\'.\n\n    There is also automation-friendly JSON input mode which allows the caller\n    to provide the mapping between commit and new message and username in the\n    following format:\n\n        {\n        "<commit_hash>": { "message": "<message>", "user": "<user>" //\n        optional } }\n\n    Note:\n        You can specify --fold to fold multiple revisions into one when the\n        given revisions form a linear unbroken chain. However, \'hg fold\' is\n        the preferred command for this purpose. See \'hg help fold\' for more\n        information.\n\nOptions (\\[+\\] can be repeated):\n\n-r --rev VALUE \\[+\\] revision to edit --fold fold specified revisions\ninto one --batch edit messages of multiple commits in one editor\ninvocation --json-input-file VALUE read commit messages and users from\nJSON file -M --reuse-message VALUE reuse commit message from another\ncommit -m --message TEXT use text as commit message -l --logfile FILE\nread commit message from file -d --date DATE record the specified date\nas commit date -u --user USER record the specified user as committer\n\n(some details hidden, use --verbose to show complete help)\n')))}l.isMDXComponent=!0}}]);