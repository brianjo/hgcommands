"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[457],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>u});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},l=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),l=p(r),u=o,f=l["".concat(c,".").concat(u)]||l[u]||d[u]||a;return r?n.createElement(f,s(s({ref:t},m),{},{components:r})):n.createElement(f,s({ref:t},m))}));function u(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=l;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}l.displayName="MDXCreateElement"},5456:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={},s=void 0,i={unversionedId:"Commands/graft",id:"Commands/graft",title:"graft",description:"",source:"@site/docs/Commands/graft.md",sourceDirName:"Commands",slug:"/Commands/graft",permalink:"/hgcommands/docs/Commands/graft",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/graft.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"githelp",permalink:"/hgcommands/docs/Commands/githelp"},next:{title:"grep",permalink:"/hgcommands/docs/Commands/grep"}},c={},p=[],m={toc:p};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"hg graft \\[OPTION\\]... \\[-r REV\\]... REV...\n\naliases: gra\n\ncopy commits from a different location\n\n    This command uses Mercurial's merge logic to copy individual changes from\n    other branches without merging branches in the history graph. This is\n    sometimes known as 'backporting' or 'cherry-picking'. By default, graft\n    will copy user, date, and description from the source commits.\n\n    Changesets that are ancestors of the current revision, that have already\n    been grafted, or that are merges will be skipped.\n\n    If --log is specified, log messages will have a comment appended of the\n    form:\n\n      (grafted from CHANGESETHASH)\n\n    If --force is specified, revisions will be grafted even if they are\n    already ancestors of, or have been grafted to, the destination. This is\n    useful when the revisions have since been backed out.\n\n    If a graft merge results in conflicts, the graft process is interrupted so\n    that the current merge can be manually resolved. Once all conflicts are\n    addressed, the graft process can be continued with the -c/--continue\n    option.\n\n    Note:\n       The -c/--continue option does not reapply earlier options, except for\n       --force.\n\n    See 'hg help revisions' for more about specifying revisions.\n\n    Returns 0 on successful completion.\n\nOptions (\\[+\\] can be repeated):\n\n-r --rev REV \\[+\\] revisions to graft -c --continue resume interrupted\ngraft --abort abort an interrupted graft -e --edit invoke editor on\ncommit messages --log append graft info to log message -f --force force\ngraft -D --currentdate record the current date as commit date -U\n--currentuser record the current user as committer -d --date DATE record\nthe specified date as commit date -u --user USER record the specified\nuser as committer -t --tool VALUE specify merge tool -n --dry-run do not\nperform actions, just print output\n\n(some details hidden, use --verbose to show complete help)\n")))}d.isMDXComponent=!0}}]);