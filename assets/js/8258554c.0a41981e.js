"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6426],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),d=l(n),u=o,f=d["".concat(s,".").concat(u)]||d[u]||p[u]||a;return n?r.createElement(f,i(i({ref:t},m),{},{components:n})):r.createElement(f,i({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},603:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={},i=void 0,c={unversionedId:"Commands/reset",id:"Commands/reset",title:"reset",description:"",source:"@site/docs/Commands/reset.md",sourceDirName:"Commands",slug:"/Commands/reset",permalink:"/hgcommands/docs/Commands/reset",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/reset.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"repack",permalink:"/hgcommands/docs/Commands/repack"},next:{title:"resolve",permalink:"/hgcommands/docs/Commands/resolve"}},s={},l=[],m={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"hg reset \\[REV\\]\n\nmoves the active bookmark and working copy parent to the desired rev\n\n    The reset command is for moving your active bookmark and working copy to a\n    different location. This is useful for undoing commits, amends, etc.\n\n    By default, the working copy content is not touched, so you will have\n    pending changes after the reset. If --clean/-C is specified, the working\n    copy contents will be overwritten to match the destination revision, and\n    you will not have any pending changes.\n\n    After your bookmark and working copy have been moved, the command will\n    delete any commits that belonged only to that bookmark. Use --keep/-k to\n    avoid deleting any commits.\n\nOptions:\n\n-C --clean wipe the working copy clean when resetting -k --keep keeps\nthe old changesets the bookmark pointed to -r --rev VALUE revision to\nreset to\n\n(some details hidden, use --verbose to show complete help)\n")))}p.isMDXComponent=!0}}]);