"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3122],{3905:(e,n,t)=>{t.d(n,{Zo:()=>h,kt:()=>u});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},h=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),m=l(t),u=s,p=m["".concat(c,".").concat(u)]||m[u]||d[u]||a;return t?r.createElement(p,o(o({ref:n},h),{},{components:t})):r.createElement(p,o({ref:n},h))}));function u(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},796:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(7462),s=(t(7294),t(3905));const a={},o=void 0,i={unversionedId:"Commands/shelve",id:"Commands/shelve",title:"shelve",description:"",source:"@site/docs/Commands/shelve.md",sourceDirName:"Commands",slug:"/Commands/shelve",permalink:"/hgcommands/docs/Commands/shelve",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/shelve.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"serve",permalink:"/hgcommands/docs/Commands/serve"},next:{title:"show",permalink:"/hgcommands/docs/Commands/show"}},c={},l=[],h={toc:l};function d(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'hg shelve \\[OPTION\\]... \\[FILE\\]...\n\naliases: she\n\nsave pending changes and revert checkout to a clean state\n\n    Shelving takes files that "hg status" reports as not clean, saves the\n    modifications to a bundle (a shelved change), and reverts the files so\n    that their state in the working directory becomes clean.\n\n    To restore these changes to the working directory, using "hg unshelve";\n    this will work even if you switch to a different commit.\n\n    When no files are specified, "hg shelve" saves all not-clean files. If\n    specific files or directories are named, only changes to those files are\n    shelved.\n\n    In bare shelve (when no files are specified, without interactive, include\n    and exclude option), shelving remembers information if the working\n    directory was on newly created branch, in other words working directory\n    was on different branch than its first parent. In this situation\n    unshelving restores branch information to the working directory.\n\n    Each shelved change has a name that makes it easier to find later. The\n    name of a shelved change defaults to being based on the active bookmark,\n    or if there is no active bookmark, the current named branch.  To specify a\n    different name, use "--name".\n\n    To see a list of existing shelved changes, use the "--list" option. For\n    each shelved change, this will print its name, age, and description; use "\n    --patch" or "--stat" for more details.\n\n    To delete specific shelved changes, use "--delete". To delete all shelved\n    changes, use "--cleanup".\n\n(use \'hg help -e shelve\' to show help for the shelve extension)\n\nOptions (\\[+\\] can be repeated):\n\n-A --addremove mark new/missing files as added/removed before shelving\n-u --unknown store unknown files in the shelve --cleanup delete all\nshelved changes --date DATE shelve with the specified commit date -d\n--delete delete the named shelved change(s) -e --edit invoke editor on\ncommit messages -l --list list current shelves -m --message TEXT use\ntext as shelve message -n --name NAME use the given name for the shelved\ncommit -p --patch show patch -i --interactive interactive mode, only\nworks while creating a shelve --stat output diffstat-style summary of\nchanges -I --include PATTERN \\[+\\] include names matching the given\npatterns -X --exclude PATTERN \\[+\\] exclude names matching the given\npatterns\n\n(some details hidden, use --verbose to show complete help)\n')))}d.isMDXComponent=!0}}]);