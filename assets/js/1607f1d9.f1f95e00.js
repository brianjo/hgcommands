"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1060],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(n),m=o,f=l["".concat(c,".").concat(m)]||l[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=l;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},6408:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const i={},a=void 0,s={unversionedId:"Commands/revert",id:"Commands/revert",title:"revert",description:"",source:"@site/docs/Commands/revert.md",sourceDirName:"Commands",slug:"/Commands/revert",permalink:"/hgcommands/docs/Commands/revert",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/revert.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"resolve",permalink:"/hgcommands/docs/Commands/resolve"},next:{title:"root",permalink:"/hgcommands/docs/Commands/root"}},c={},u=[],p={toc:u};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"hg revert \\[OPTION\\]... \\[-r REV\\] \\[NAME\\]...\n\naliases: rev\n\nchange the specified files to match a commit\n\n    With no revision specified, restore the contents of files to an unmodified\n    state and unschedule adds, removes, copies, and renames. In other words,\n    revert the specified files or directories to the contents they had in the\n    current commit. If you are in the middle of an unfinished merge state, you\n    must explicitly specify a revision.\n\n    Use the -r/--rev option to revert the given files or directories to their\n    states as of a specific commit. Because revert does not actually check out\n    the specified commit, the files appear as modified and show up as pending\n    changes in 'hg status'.\n\n    Revert causes files to match their contents in another commit. If instead\n    you want to undo a specific landed commit, use 'hg backout' instead. Run\n    'hg help backout' for more information.\n\n    Modified files are saved with an .orig suffix before reverting. To disable\n    these backups, use --no-backup. You can configure Mercurial to store these\n    backup files in a custom directory relative to the root of the repository\n    by setting the \"ui.origbackuppath\" configuration option.\n\n    Returns 0 on success.\n\nOptions (\\[+\\] can be repeated):\n\n-a --all revert all changes when no arguments given -d --date DATE\ntipmost revision matching date -r --rev REV revert to the specified\nrevision -C --no-backup do not save backup copies of files -i\n--interactive interactively select the changes -I --include PATTERN\n\\[+\\] include names matching the given patterns -X --exclude PATTERN\n\\[+\\] exclude names matching the given patterns -n --dry-run do not\nperform actions, just print output\n\n(some details hidden, use --verbose to show complete help)\n")))}d.isMDXComponent=!0}}]);