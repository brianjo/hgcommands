"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4422],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),d=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=d(n),u=o,b=m["".concat(i,".").concat(u)]||m[u]||p[u]||a;return n?r.createElement(b,s(s({ref:t},l),{},{components:n})):r.createElement(b,s({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var d=2;d<a;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6285:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const a={slug:"/commands/"},s=void 0,c={unversionedId:"Commands/absorb",id:"Commands/absorb",title:"absorb",description:"",source:"@site/docs/Commands/absorb.md",sourceDirName:"Commands",slug:"/commands/",permalink:"/hgcommands/docs/commands/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/absorb.md",tags:[],version:"current",frontMatter:{slug:"/commands/"},sidebar:"tutorialSidebar",previous:{title:"intro",permalink:"/hgcommands/docs/intro"},next:{title:"add",permalink:"/hgcommands/docs/Commands/add"}},i={},d=[],l={toc:d};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    hg absorb [OPTION] [FILE]...\n\n    aliases: ab, sf\n\n    apply pending corrections into a stack of commits\n\n        absorb analyzes each change in your working directory and attempts to\n        amend the changed lines into the commits in your stack that first\n        introduced those lines.\n\n        If absorb cannot find an unambiguous commit to amend for a change, that\n        change will be left in the working directory, untouched. They can be\n        observed by 'hg status' or 'hg diff' afterwards. In other words, absorb\n        does not write to the working directory.\n\n        Changesets outside the revset '::. and not public() and not merge()' will\n        not be changed.\n\n        Changesets that become empty after applying the changes will be deleted.\n\n        By default, absorb will show what it plans to do and prompt for\n        confirmation.  If you are confident that the changes will be absorbed to\n        the correct place, run 'hg absorb -a' to apply the changes immediately.\n\n        Returns 0 on success, 1 if all chunks were ignored and nothing absorbed.\n\n    (use 'hg help -e absorb' to show help for the absorb extension)\n\n    Options ([+] can be repeated):\n\n    -a --apply-changes       apply changes without prompting for confirmation\n    -d --date DATE           record the specified date as commit date\n    -n --dry-run             do not perform actions, just print output\n    -T --template TEMPLATE   display with template\n    -I --include PATTERN [+] include names matching the given patterns\n    -X --exclude PATTERN [+] exclude names matching the given patterns\n\n    (some details hidden, use --verbose to show complete help)\n")))}p.isMDXComponent=!0}}]);