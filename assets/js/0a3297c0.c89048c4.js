"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3010],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),f=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=f(e.components);return r.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=f(t),u=i,p=l["".concat(c,".").concat(u)]||l[u]||m[u]||o;return t?r.createElement(p,a(a({ref:n},d),{},{components:t})):r.createElement(p,a({ref:n},d))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=l;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var f=2;f<o;f++)a[f]=t[f];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},8976:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>f});var r=t(7462),i=(t(7294),t(3905));const o={},a=void 0,s={unversionedId:"Commands/diff",id:"Commands/diff",title:"diff",description:"",source:"@site/docs/Commands/diff.md",sourceDirName:"Commands",slug:"/Commands/diff",permalink:"/hgcommands/docs/Commands/diff",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/diff.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"copy",permalink:"/hgcommands/docs/Commands/copy"},next:{title:"doctor",permalink:"/hgcommands/docs/Commands/doctor"}},c={},f=[],d={toc:f};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"hg diff \\[OPTION\\]... (\\[-c REV\\] \\| \\[-r REV1 \\[-r REV2\\]\\])\n\\[FILE\\]...\n\naliases: d\n\nshow differences between commits\n\n    Show the differences between two commits. If only one commit is specified,\n    shows the differences between the specified commit and your pending\n    changes. If no commits are specified, shows your pending changes.\n\n    Specify -c to see the changes in the specified commit relative to its\n    parent.\n\n    By default, this command skips binary files. To override this behavior,\n    specify -a to include binary files in the diff, probably with undesirable\n    results.\n\n    By default, diffs are shown using the unified diff format. Specify -g to\n    generate diffs in the git extended diff format. For more information, read\n    'hg help diffs'.\n\n    Note:\n       'hg diff' might generate unexpected results during merges because it\n       defaults to comparing against your checkout's first parent commit if no\n       commits are specified.\n\n    Returns 0 on success.\n\nOptions (\\[+\\] can be repeated):\n\n-r --rev REV \\[+\\] revision -c --change REV change made by revision -a\n--text treat all files as text -g --git use git extended diff format\n--binary generate binary diffs in git mode (default) --nodates omit\ndates from diff headers --noprefix omit a/ and b/ prefixes from\nfilenames -p --show-function show which function each change is in\n--reverse produce a diff that undoes the changes -w --ignore-all-space\nignore white space when comparing lines -b --ignore-space-change ignore\nchanges in the amount of white space -B --ignore-blank-lines ignore\nchanges whose lines are all blank -Z --ignore-space-at-eol ignore\nchanges in whitespace at EOL -U --unified NUM number of lines of context\nto show --stat output diffstat-style summary of changes --root DIR\nproduce diffs relative to subdirectory --only-files-in-revs only show\nchanges for files modified in the requested revisions -I --include\nPATTERN \\[+\\] include names matching the given patterns -X --exclude\nPATTERN \\[+\\] exclude names matching the given patterns\n--since-last-submit show changes since last Phabricator submit\n--since-last-submit-2o show diff of current diff and last Phabricator\nsubmit\n\n(some details hidden, use --verbose to show complete help)\n")))}m.isMDXComponent=!0}}]);