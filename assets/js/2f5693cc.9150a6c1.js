"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8307],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=o,f=u["".concat(c,".").concat(d)]||u[d]||p[d]||a;return n?r.createElement(f,i(i({ref:t},m),{},{components:n})):r.createElement(f,i({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2323:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={},i=void 0,s={unversionedId:"Commands/show",id:"Commands/show",title:"show",description:"",source:"@site/docs/Commands/show.md",sourceDirName:"Commands",slug:"/Commands/show",permalink:"/docs/Commands/show",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Commands/show.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"shelve",permalink:"/docs/Commands/shelve"},next:{title:"smartlog",permalink:"/docs/Commands/smartlog"}},c={},l=[],m={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"hg show \\[OPTION\\]... \\[REV \\[FILE\\]...\\]\n\nshow commit in detail\n\n    Show the commit message and contents for the specified commit. If no\n    commit is specified, shows the current commit.\n\n    This behaves similarly to 'hg log -vp -r REV [OPTION]... [FILE]...', or if\n    called without a REV, 'hg log -vp -r . [OPTION]...' Use 'hg log' for more\n    powerful operations than supported by hg show.\n\nOptions (\\[+\\] can be repeated):\n\n    --nodates             omit dates from diff headers (but keeps it in commit\n                          header)\n    --noprefix            omit a/ and b/ prefixes from filenames\n    --stat                output diffstat-style summary of changes\n\n-g --git use git extended diff format -U --unified VALUE number of lines\nof diff context to show (default: 3) -w --ignore-all-space ignore white\nspace when comparing lines -b --ignore-space-change ignore changes in\nthe amount of white space -B --ignore-blank-lines ignore changes whose\nlines are all blank -Z --ignore-space-at-eol ignore changes in\nwhitespace at EOL -T --template TEMPLATE display with template -I\n--include PATTERN \\[+\\] include names matching the given patterns -X\n--exclude PATTERN \\[+\\] exclude names matching the given patterns\n\n(some details hidden, use --verbose to show complete help)\n")))}p.isMDXComponent=!0}}]);